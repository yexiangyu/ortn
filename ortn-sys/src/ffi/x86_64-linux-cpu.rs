/* automatically generated by rust-bindgen 0.70.1 */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const ORT_API_VERSION: u32 = 19;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type wchar_t = ::std::os::raw::c_int;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::std::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::std::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"][::std::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"][::std::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::std::mem::size_of::<ldiv_t>() - 16usize];
    ["Alignment of ldiv_t"][::std::mem::align_of::<ldiv_t>() - 8usize];
    ["Offset of field: ldiv_t::quot"][::std::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::std::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::std::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::std::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::std::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::std::mem::offset_of!(lldiv_t, rem) - 8usize];
};
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::__fds_bits"][::std::mem::offset_of!(fd_set, __fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"][::std::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"]
        [::std::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_refs"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of random_data"][::std::mem::size_of::<random_data>() - 48usize];
    ["Alignment of random_data"][::std::mem::align_of::<random_data>() - 8usize];
    ["Offset of field: random_data::fptr"][::std::mem::offset_of!(random_data, fptr) - 0usize];
    ["Offset of field: random_data::rptr"][::std::mem::offset_of!(random_data, rptr) - 8usize];
    ["Offset of field: random_data::state"][::std::mem::offset_of!(random_data, state) - 16usize];
    ["Offset of field: random_data::rand_type"]
        [::std::mem::offset_of!(random_data, rand_type) - 24usize];
    ["Offset of field: random_data::rand_deg"]
        [::std::mem::offset_of!(random_data, rand_deg) - 28usize];
    ["Offset of field: random_data::rand_sep"]
        [::std::mem::offset_of!(random_data, rand_sep) - 32usize];
    ["Offset of field: random_data::end_ptr"]
        [::std::mem::offset_of!(random_data, end_ptr) - 40usize];
};
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drand48_data"][::std::mem::size_of::<drand48_data>() - 24usize];
    ["Alignment of drand48_data"][::std::mem::align_of::<drand48_data>() - 8usize];
    ["Offset of field: drand48_data::__x"][::std::mem::offset_of!(drand48_data, __x) - 0usize];
    ["Offset of field: drand48_data::__old_x"]
        [::std::mem::offset_of!(drand48_data, __old_x) - 6usize];
    ["Offset of field: drand48_data::__c"][::std::mem::offset_of!(drand48_data, __c) - 12usize];
    ["Offset of field: drand48_data::__init"]
        [::std::mem::offset_of!(drand48_data, __init) - 14usize];
    ["Offset of field: drand48_data::__a"][::std::mem::offset_of!(drand48_data, __a) - 16usize];
};
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(u32)]
#[non_exhaustive]
#[doc = " Copied from TensorProto::DataType\n Currently, Ort doesn't support complex64, complex128"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ONNXTensorElementDataType {
    ONNX_TENSOR_ELEMENT_DATA_TYPE_UNDEFINED = 0,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT = 1,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT8 = 2,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_INT8 = 3,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT16 = 4,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_INT16 = 5,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_INT32 = 6,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_INT64 = 7,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_STRING = 8,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_BOOL = 9,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT16 = 10,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_DOUBLE = 11,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT32 = 12,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT64 = 13,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_COMPLEX64 = 14,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_COMPLEX128 = 15,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_BFLOAT16 = 16,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E4M3FN = 17,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E4M3FNUZ = 18,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E5M2 = 19,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E5M2FNUZ = 20,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT4 = 21,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_INT4 = 22,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ONNXType {
    ONNX_TYPE_UNKNOWN = 0,
    ONNX_TYPE_TENSOR = 1,
    ONNX_TYPE_SEQUENCE = 2,
    ONNX_TYPE_MAP = 3,
    ONNX_TYPE_OPAQUE = 4,
    ONNX_TYPE_SPARSETENSOR = 5,
    ONNX_TYPE_OPTIONAL = 6,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtSparseFormat {
    ORT_SPARSE_UNDEFINED = 0,
    ORT_SPARSE_COO = 1,
    ORT_SPARSE_CSRC = 2,
    ORT_SPARSE_BLOCK_SPARSE = 4,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtSparseIndicesFormat {
    ORT_SPARSE_COO_INDICES = 0,
    ORT_SPARSE_CSR_INNER_INDICES = 1,
    ORT_SPARSE_CSR_OUTER_INDICES = 2,
    ORT_SPARSE_BLOCK_SPARSE_INDICES = 3,
}
#[repr(u32)]
#[non_exhaustive]
#[doc = " \\brief Logging severity levels\n\n In typical API usage, specifying a logging severity level specifies the minimum severity of log messages to show."]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtLoggingLevel {
    #[doc = "< Verbose informational messages (least severe)."]
    ORT_LOGGING_LEVEL_VERBOSE = 0,
    #[doc = "< Informational messages."]
    ORT_LOGGING_LEVEL_INFO = 1,
    #[doc = "< Warning messages."]
    ORT_LOGGING_LEVEL_WARNING = 2,
    #[doc = "< Error messages."]
    ORT_LOGGING_LEVEL_ERROR = 3,
    #[doc = "< Fatal error messages (most severe)."]
    ORT_LOGGING_LEVEL_FATAL = 4,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtErrorCode {
    ORT_OK = 0,
    ORT_FAIL = 1,
    ORT_INVALID_ARGUMENT = 2,
    ORT_NO_SUCHFILE = 3,
    ORT_NO_MODEL = 4,
    ORT_ENGINE_ERROR = 5,
    ORT_RUNTIME_EXCEPTION = 6,
    ORT_INVALID_PROTOBUF = 7,
    ORT_MODEL_LOADED = 8,
    ORT_NOT_IMPLEMENTED = 9,
    ORT_INVALID_GRAPH = 10,
    ORT_EP_FAIL = 11,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtOpAttrType {
    ORT_OP_ATTR_UNDEFINED = 0,
    ORT_OP_ATTR_INT = 1,
    ORT_OP_ATTR_INTS = 2,
    ORT_OP_ATTR_FLOAT = 3,
    ORT_OP_ATTR_FLOATS = 4,
    ORT_OP_ATTR_STRING = 5,
    ORT_OP_ATTR_STRINGS = 6,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtEnv {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtStatus {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtMemoryInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtIoBinding {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtSession {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtValue {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtRunOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtTypeInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtTensorTypeAndShapeInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtMapTypeInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtSequenceTypeInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtOptionalTypeInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtSessionOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtCustomOpDomain {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtModelMetadata {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtThreadPoolParams {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtThreadingOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtArenaCfg {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtPrepackedWeightsContainer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtTensorRTProviderOptionsV2 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtCUDAProviderOptionsV2 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtCANNProviderOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtDnnlProviderOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtOp {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtOpAttr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtLogger {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtShapeInferContext {
    _unused: [u8; 0],
}
pub type OrtStatusPtr = *mut OrtStatus;
#[doc = " \\brief Memory allocation interface\n\n Structure of function pointers that defines a memory allocator. This can be created and filled in by the user for custom allocators.\n\n When an allocator is passed to any function, be sure that the allocator object is not destroyed until the last allocated object using it is freed."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtAllocator {
    #[doc = "< Must be initialized to ORT_API_VERSION"]
    pub version: u32,
    #[doc = "< Returns a pointer to an allocated block of `size` bytes"]
    pub Alloc: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut OrtAllocator, size: usize) -> *mut ::std::os::raw::c_void,
    >,
    #[doc = "< Free a block of memory previously allocated with OrtAllocator::Alloc"]
    pub Free: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut OrtAllocator, p: *mut ::std::os::raw::c_void),
    >,
    #[doc = "< Return a pointer to an ::OrtMemoryInfo that describes this allocator"]
    pub Info: ::std::option::Option<
        unsafe extern "C" fn(this_: *const OrtAllocator) -> *const OrtMemoryInfo,
    >,
    #[doc = "< Returns a pointer to an allocated block of `size` bytes"]
    pub Reserve: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut OrtAllocator, size: usize) -> *mut ::std::os::raw::c_void,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OrtAllocator"][::std::mem::size_of::<OrtAllocator>() - 40usize];
    ["Alignment of OrtAllocator"][::std::mem::align_of::<OrtAllocator>() - 8usize];
    ["Offset of field: OrtAllocator::version"]
        [::std::mem::offset_of!(OrtAllocator, version) - 0usize];
    ["Offset of field: OrtAllocator::Alloc"][::std::mem::offset_of!(OrtAllocator, Alloc) - 8usize];
    ["Offset of field: OrtAllocator::Free"][::std::mem::offset_of!(OrtAllocator, Free) - 16usize];
    ["Offset of field: OrtAllocator::Info"][::std::mem::offset_of!(OrtAllocator, Info) - 24usize];
    ["Offset of field: OrtAllocator::Reserve"]
        [::std::mem::offset_of!(OrtAllocator, Reserve) - 32usize];
};
pub type OrtLoggingFunction = ::std::option::Option<
    unsafe extern "C" fn(
        param: *mut ::std::os::raw::c_void,
        severity: OrtLoggingLevel,
        category: *const ::std::os::raw::c_char,
        logid: *const ::std::os::raw::c_char,
        code_location: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
    ),
>;
#[repr(u32)]
#[non_exhaustive]
#[doc = " \\brief Graph optimization level\n\n Refer to https://www.onnxruntime.ai/docs/performance/graph-optimizations.html#graph-optimization-levels\n for an in-depth understanding of the Graph Optimization Levels."]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GraphOptimizationLevel {
    ORT_DISABLE_ALL = 0,
    ORT_ENABLE_BASIC = 1,
    ORT_ENABLE_EXTENDED = 2,
    ORT_ENABLE_ALL = 99,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ExecutionMode {
    ORT_SEQUENTIAL = 0,
    ORT_PARALLEL = 1,
}
#[repr(u32)]
#[non_exhaustive]
#[doc = " \\brief Language projection identifiers\n /see OrtApi::SetLanguageProjection"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtLanguageProjection {
    ORT_PROJECTION_C = 0,
    ORT_PROJECTION_CPLUSPLUS = 1,
    ORT_PROJECTION_CSHARP = 2,
    ORT_PROJECTION_PYTHON = 3,
    ORT_PROJECTION_JAVA = 4,
    ORT_PROJECTION_WINML = 5,
    ORT_PROJECTION_NODEJS = 6,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtKernelInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtKernelContext {
    _unused: [u8; 0],
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtAllocatorType {
    OrtInvalidAllocator = -1,
    OrtDeviceAllocator = 0,
    OrtArenaAllocator = 1,
}
impl OrtMemType {
    pub const OrtMemTypeCPU: OrtMemType = OrtMemType::OrtMemTypeCPUOutput;
}
#[repr(i32)]
#[non_exhaustive]
#[doc = " \\brief Memory types for allocated memory, execution provider specific types should be extended in each provider."]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtMemType {
    #[doc = "< Any CPU memory used by non-CPU execution provider"]
    OrtMemTypeCPUInput = -2,
    #[doc = "< CPU accessible memory outputted by non-CPU execution provider, i.e. CUDA_PINNED"]
    OrtMemTypeCPUOutput = -1,
    #[doc = "< The default allocator for execution provider"]
    OrtMemTypeDefault = 0,
}
#[repr(u32)]
#[non_exhaustive]
#[doc = " \\brief This mimics OrtDevice type constants so they can be returned in the API"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtMemoryInfoDeviceType {
    OrtMemoryInfoDeviceType_CPU = 0,
    OrtMemoryInfoDeviceType_GPU = 1,
    OrtMemoryInfoDeviceType_FPGA = 2,
}
#[repr(u32)]
#[non_exhaustive]
#[doc = " \\brief Algorithm to use for cuDNN Convolution Op"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtCudnnConvAlgoSearch {
    OrtCudnnConvAlgoSearchExhaustive = 0,
    OrtCudnnConvAlgoSearchHeuristic = 1,
    OrtCudnnConvAlgoSearchDefault = 2,
}
#[doc = " \\brief CUDA Provider Options\n\n \\see OrtApi::SessionOptionsAppendExecutionProvider_CUDA"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtCUDAProviderOptions {
    #[doc = " \\brief CUDA device Id\n   Defaults to 0."]
    pub device_id: ::std::os::raw::c_int,
    #[doc = " \\brief CUDA Convolution algorithm search configuration.\n   See enum OrtCudnnConvAlgoSearch for more details.\n   Defaults to OrtCudnnConvAlgoSearchExhaustive."]
    pub cudnn_conv_algo_search: OrtCudnnConvAlgoSearch,
    #[doc = " \\brief CUDA memory limit (To use all possible memory pass in maximum size_t)\n   Defaults to SIZE_MAX.\n   \\note If a ::OrtArenaCfg has been applied, it will override this field"]
    pub gpu_mem_limit: usize,
    #[doc = " \\brief Strategy used to grow the memory arena\n   0 = kNextPowerOfTwo<br>\n   1 = kSameAsRequested<br>\n   Defaults to 0.\n   \\note If a ::OrtArenaCfg has been applied, it will override this field"]
    pub arena_extend_strategy: ::std::os::raw::c_int,
    #[doc = " \\brief Flag indicating if copying needs to take place on the same stream as the compute stream in the CUDA EP\n   0 = Use separate streams for copying and compute.\n   1 = Use the same stream for copying and compute.\n   Defaults to 1.\n   WARNING: Setting this to 0 may result in data races for some models.\n   Please see issue #4829 for more details."]
    pub do_copy_in_default_stream: ::std::os::raw::c_int,
    #[doc = " \\brief Flag indicating if there is a user provided compute stream\n   Defaults to 0."]
    pub has_user_compute_stream: ::std::os::raw::c_int,
    #[doc = " \\brief User provided compute stream.\n   If provided, please set `has_user_compute_stream` to 1."]
    pub user_compute_stream: *mut ::std::os::raw::c_void,
    #[doc = " \\brief CUDA memory arena configuration parameters"]
    pub default_memory_arena_cfg: *mut OrtArenaCfg,
    #[doc = " \\brief Enable TunableOp for using.\n   Set it to 1/0 to enable/disable TunableOp. Otherwise, it is disabled by default.\n   This option can be overridden by environment variable ORT_CUDA_TUNABLE_OP_ENABLE."]
    pub tunable_op_enable: ::std::os::raw::c_int,
    #[doc = " \\brief Enable TunableOp for tuning.\n   Set it to 1/0 to enable/disable TunableOp tuning. Otherwise, it is disabled by default.\n   This option can be overridden by environment variable ORT_CUDA_TUNABLE_OP_TUNING_ENABLE."]
    pub tunable_op_tuning_enable: ::std::os::raw::c_int,
    #[doc = " \\brief Max tuning duration time limit for each instance of TunableOp.\n   Defaults to 0 to disable the limit."]
    pub tunable_op_max_tuning_duration_ms: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OrtCUDAProviderOptions"][::std::mem::size_of::<OrtCUDAProviderOptions>() - 64usize];
    ["Alignment of OrtCUDAProviderOptions"]
        [::std::mem::align_of::<OrtCUDAProviderOptions>() - 8usize];
    ["Offset of field: OrtCUDAProviderOptions::device_id"]
        [::std::mem::offset_of!(OrtCUDAProviderOptions, device_id) - 0usize];
    ["Offset of field: OrtCUDAProviderOptions::cudnn_conv_algo_search"]
        [::std::mem::offset_of!(OrtCUDAProviderOptions, cudnn_conv_algo_search) - 4usize];
    ["Offset of field: OrtCUDAProviderOptions::gpu_mem_limit"]
        [::std::mem::offset_of!(OrtCUDAProviderOptions, gpu_mem_limit) - 8usize];
    ["Offset of field: OrtCUDAProviderOptions::arena_extend_strategy"]
        [::std::mem::offset_of!(OrtCUDAProviderOptions, arena_extend_strategy) - 16usize];
    ["Offset of field: OrtCUDAProviderOptions::do_copy_in_default_stream"]
        [::std::mem::offset_of!(OrtCUDAProviderOptions, do_copy_in_default_stream) - 20usize];
    ["Offset of field: OrtCUDAProviderOptions::has_user_compute_stream"]
        [::std::mem::offset_of!(OrtCUDAProviderOptions, has_user_compute_stream) - 24usize];
    ["Offset of field: OrtCUDAProviderOptions::user_compute_stream"]
        [::std::mem::offset_of!(OrtCUDAProviderOptions, user_compute_stream) - 32usize];
    ["Offset of field: OrtCUDAProviderOptions::default_memory_arena_cfg"]
        [::std::mem::offset_of!(OrtCUDAProviderOptions, default_memory_arena_cfg) - 40usize];
    ["Offset of field: OrtCUDAProviderOptions::tunable_op_enable"]
        [::std::mem::offset_of!(OrtCUDAProviderOptions, tunable_op_enable) - 48usize];
    ["Offset of field: OrtCUDAProviderOptions::tunable_op_tuning_enable"]
        [::std::mem::offset_of!(OrtCUDAProviderOptions, tunable_op_tuning_enable) - 52usize];
    ["Offset of field: OrtCUDAProviderOptions::tunable_op_max_tuning_duration_ms"][::std::mem::offset_of!(
        OrtCUDAProviderOptions,
        tunable_op_max_tuning_duration_ms
    ) - 56usize];
};
#[doc = " \\brief ROCM Provider Options\n\n \\see OrtApi::SessionOptionsAppendExecutionProvider_ROCM"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtROCMProviderOptions {
    #[doc = " \\brief ROCM device Id\n   Defaults to 0."]
    pub device_id: ::std::os::raw::c_int,
    #[doc = " \\brief ROCM MIOpen Convolution algorithm exaustive search option.\n   Defaults to 0 (false)."]
    pub miopen_conv_exhaustive_search: ::std::os::raw::c_int,
    #[doc = " \\brief ROCM memory limit (To use all possible memory pass in maximum size_t)\n   Defaults to SIZE_MAX.\n   \\note If a ::OrtArenaCfg has been applied, it will override this field"]
    pub gpu_mem_limit: usize,
    #[doc = " \\brief Strategy used to grow the memory arena\n   0 = kNextPowerOfTwo<br>\n   1 = kSameAsRequested<br>\n   Defaults to 0.\n   \\note If a ::OrtArenaCfg has been applied, it will override this field"]
    pub arena_extend_strategy: ::std::os::raw::c_int,
    #[doc = " \\brief Flag indicating if copying needs to take place on the same stream as the compute stream in the ROCM EP\n   0 = Use separate streams for copying and compute.\n   1 = Use the same stream for copying and compute.\n   Defaults to 1.\n   WARNING: Setting this to 0 may result in data races for some models.\n   Please see issue #4829 for more details."]
    pub do_copy_in_default_stream: ::std::os::raw::c_int,
    #[doc = " \\brief Flag indicating if there is a user provided compute stream\n   Defaults to 0."]
    pub has_user_compute_stream: ::std::os::raw::c_int,
    #[doc = " \\brief User provided compute stream.\n   If provided, please set `has_user_compute_stream` to 1."]
    pub user_compute_stream: *mut ::std::os::raw::c_void,
    #[doc = " \\brief ROCM memory arena configuration parameters"]
    pub default_memory_arena_cfg: *mut OrtArenaCfg,
    pub enable_hip_graph: ::std::os::raw::c_int,
    #[doc = " \\brief Enable TunableOp for using.\n   Set it to 1/0 to enable/disable TunableOp. Otherwise, it is disabled by default.\n   This option can be overridden by environment variable ORT_ROCM_TUNABLE_OP_ENABLE."]
    pub tunable_op_enable: ::std::os::raw::c_int,
    #[doc = " \\brief Enable TunableOp for tuning.\n   Set it to 1/0 to enable/disable TunableOp tuning. Otherwise, it is disabled by default.\n   This option can be overridden by environment variable ORT_ROCM_TUNABLE_OP_TUNING_ENABLE."]
    pub tunable_op_tuning_enable: ::std::os::raw::c_int,
    #[doc = " \\brief Max tuning duration time limit for each instance of TunableOp.\n   Defaults to 0 to disable the limit."]
    pub tunable_op_max_tuning_duration_ms: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OrtROCMProviderOptions"][::std::mem::size_of::<OrtROCMProviderOptions>() - 64usize];
    ["Alignment of OrtROCMProviderOptions"]
        [::std::mem::align_of::<OrtROCMProviderOptions>() - 8usize];
    ["Offset of field: OrtROCMProviderOptions::device_id"]
        [::std::mem::offset_of!(OrtROCMProviderOptions, device_id) - 0usize];
    ["Offset of field: OrtROCMProviderOptions::miopen_conv_exhaustive_search"]
        [::std::mem::offset_of!(OrtROCMProviderOptions, miopen_conv_exhaustive_search) - 4usize];
    ["Offset of field: OrtROCMProviderOptions::gpu_mem_limit"]
        [::std::mem::offset_of!(OrtROCMProviderOptions, gpu_mem_limit) - 8usize];
    ["Offset of field: OrtROCMProviderOptions::arena_extend_strategy"]
        [::std::mem::offset_of!(OrtROCMProviderOptions, arena_extend_strategy) - 16usize];
    ["Offset of field: OrtROCMProviderOptions::do_copy_in_default_stream"]
        [::std::mem::offset_of!(OrtROCMProviderOptions, do_copy_in_default_stream) - 20usize];
    ["Offset of field: OrtROCMProviderOptions::has_user_compute_stream"]
        [::std::mem::offset_of!(OrtROCMProviderOptions, has_user_compute_stream) - 24usize];
    ["Offset of field: OrtROCMProviderOptions::user_compute_stream"]
        [::std::mem::offset_of!(OrtROCMProviderOptions, user_compute_stream) - 32usize];
    ["Offset of field: OrtROCMProviderOptions::default_memory_arena_cfg"]
        [::std::mem::offset_of!(OrtROCMProviderOptions, default_memory_arena_cfg) - 40usize];
    ["Offset of field: OrtROCMProviderOptions::enable_hip_graph"]
        [::std::mem::offset_of!(OrtROCMProviderOptions, enable_hip_graph) - 48usize];
    ["Offset of field: OrtROCMProviderOptions::tunable_op_enable"]
        [::std::mem::offset_of!(OrtROCMProviderOptions, tunable_op_enable) - 52usize];
    ["Offset of field: OrtROCMProviderOptions::tunable_op_tuning_enable"]
        [::std::mem::offset_of!(OrtROCMProviderOptions, tunable_op_tuning_enable) - 56usize];
    ["Offset of field: OrtROCMProviderOptions::tunable_op_max_tuning_duration_ms"][::std::mem::offset_of!(
        OrtROCMProviderOptions,
        tunable_op_max_tuning_duration_ms
    ) - 60usize];
};
#[doc = " \\brief TensorRT Provider Options\n\n \\see OrtApi::SessionOptionsAppendExecutionProvider_TensorRT"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtTensorRTProviderOptions {
    #[doc = "< CUDA device id (0 = default device)"]
    pub device_id: ::std::os::raw::c_int,
    pub has_user_compute_stream: ::std::os::raw::c_int,
    pub user_compute_stream: *mut ::std::os::raw::c_void,
    pub trt_max_partition_iterations: ::std::os::raw::c_int,
    pub trt_min_subgraph_size: ::std::os::raw::c_int,
    pub trt_max_workspace_size: usize,
    pub trt_fp16_enable: ::std::os::raw::c_int,
    pub trt_int8_enable: ::std::os::raw::c_int,
    pub trt_int8_calibration_table_name: *const ::std::os::raw::c_char,
    pub trt_int8_use_native_calibration_table: ::std::os::raw::c_int,
    pub trt_dla_enable: ::std::os::raw::c_int,
    pub trt_dla_core: ::std::os::raw::c_int,
    pub trt_dump_subgraphs: ::std::os::raw::c_int,
    pub trt_engine_cache_enable: ::std::os::raw::c_int,
    pub trt_engine_cache_path: *const ::std::os::raw::c_char,
    pub trt_engine_decryption_enable: ::std::os::raw::c_int,
    pub trt_engine_decryption_lib_path: *const ::std::os::raw::c_char,
    pub trt_force_sequential_engine_build: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OrtTensorRTProviderOptions"]
        [::std::mem::size_of::<OrtTensorRTProviderOptions>() - 104usize];
    ["Alignment of OrtTensorRTProviderOptions"]
        [::std::mem::align_of::<OrtTensorRTProviderOptions>() - 8usize];
    ["Offset of field: OrtTensorRTProviderOptions::device_id"]
        [::std::mem::offset_of!(OrtTensorRTProviderOptions, device_id) - 0usize];
    ["Offset of field: OrtTensorRTProviderOptions::has_user_compute_stream"]
        [::std::mem::offset_of!(OrtTensorRTProviderOptions, has_user_compute_stream) - 4usize];
    ["Offset of field: OrtTensorRTProviderOptions::user_compute_stream"]
        [::std::mem::offset_of!(OrtTensorRTProviderOptions, user_compute_stream) - 8usize];
    ["Offset of field: OrtTensorRTProviderOptions::trt_max_partition_iterations"][::std::mem::offset_of!(
        OrtTensorRTProviderOptions,
        trt_max_partition_iterations
    ) - 16usize];
    ["Offset of field: OrtTensorRTProviderOptions::trt_min_subgraph_size"]
        [::std::mem::offset_of!(OrtTensorRTProviderOptions, trt_min_subgraph_size) - 20usize];
    ["Offset of field: OrtTensorRTProviderOptions::trt_max_workspace_size"]
        [::std::mem::offset_of!(OrtTensorRTProviderOptions, trt_max_workspace_size) - 24usize];
    ["Offset of field: OrtTensorRTProviderOptions::trt_fp16_enable"]
        [::std::mem::offset_of!(OrtTensorRTProviderOptions, trt_fp16_enable) - 32usize];
    ["Offset of field: OrtTensorRTProviderOptions::trt_int8_enable"]
        [::std::mem::offset_of!(OrtTensorRTProviderOptions, trt_int8_enable) - 36usize];
    ["Offset of field: OrtTensorRTProviderOptions::trt_int8_calibration_table_name"][::std::mem::offset_of!(
        OrtTensorRTProviderOptions,
        trt_int8_calibration_table_name
    ) - 40usize];
    ["Offset of field: OrtTensorRTProviderOptions::trt_int8_use_native_calibration_table"][::std::mem::offset_of!(
        OrtTensorRTProviderOptions,
        trt_int8_use_native_calibration_table
    )
        - 48usize];
    ["Offset of field: OrtTensorRTProviderOptions::trt_dla_enable"]
        [::std::mem::offset_of!(OrtTensorRTProviderOptions, trt_dla_enable) - 52usize];
    ["Offset of field: OrtTensorRTProviderOptions::trt_dla_core"]
        [::std::mem::offset_of!(OrtTensorRTProviderOptions, trt_dla_core) - 56usize];
    ["Offset of field: OrtTensorRTProviderOptions::trt_dump_subgraphs"]
        [::std::mem::offset_of!(OrtTensorRTProviderOptions, trt_dump_subgraphs) - 60usize];
    ["Offset of field: OrtTensorRTProviderOptions::trt_engine_cache_enable"]
        [::std::mem::offset_of!(OrtTensorRTProviderOptions, trt_engine_cache_enable) - 64usize];
    ["Offset of field: OrtTensorRTProviderOptions::trt_engine_cache_path"]
        [::std::mem::offset_of!(OrtTensorRTProviderOptions, trt_engine_cache_path) - 72usize];
    ["Offset of field: OrtTensorRTProviderOptions::trt_engine_decryption_enable"][::std::mem::offset_of!(
        OrtTensorRTProviderOptions,
        trt_engine_decryption_enable
    ) - 80usize];
    ["Offset of field: OrtTensorRTProviderOptions::trt_engine_decryption_lib_path"][::std::mem::offset_of!(
        OrtTensorRTProviderOptions,
        trt_engine_decryption_lib_path
    ) - 88usize];
    ["Offset of field: OrtTensorRTProviderOptions::trt_force_sequential_engine_build"][::std::mem::offset_of!(
        OrtTensorRTProviderOptions,
        trt_force_sequential_engine_build
    ) - 96usize];
};
#[doc = " \\brief MIGraphX Provider Options\n\n \\see OrtApi::SessionOptionsAppendExecutionProvider_MIGraphX"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtMIGraphXProviderOptions {
    pub device_id: ::std::os::raw::c_int,
    pub migraphx_fp16_enable: ::std::os::raw::c_int,
    pub migraphx_int8_enable: ::std::os::raw::c_int,
    pub migraphx_use_native_calibration_table: ::std::os::raw::c_int,
    pub migraphx_int8_calibration_table_name: *const ::std::os::raw::c_char,
    pub migraphx_save_compiled_model: ::std::os::raw::c_int,
    pub migraphx_save_model_path: *const ::std::os::raw::c_char,
    pub migraphx_load_compiled_model: ::std::os::raw::c_int,
    pub migraphx_load_model_path: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OrtMIGraphXProviderOptions"]
        [::std::mem::size_of::<OrtMIGraphXProviderOptions>() - 56usize];
    ["Alignment of OrtMIGraphXProviderOptions"]
        [::std::mem::align_of::<OrtMIGraphXProviderOptions>() - 8usize];
    ["Offset of field: OrtMIGraphXProviderOptions::device_id"]
        [::std::mem::offset_of!(OrtMIGraphXProviderOptions, device_id) - 0usize];
    ["Offset of field: OrtMIGraphXProviderOptions::migraphx_fp16_enable"]
        [::std::mem::offset_of!(OrtMIGraphXProviderOptions, migraphx_fp16_enable) - 4usize];
    ["Offset of field: OrtMIGraphXProviderOptions::migraphx_int8_enable"]
        [::std::mem::offset_of!(OrtMIGraphXProviderOptions, migraphx_int8_enable) - 8usize];
    ["Offset of field: OrtMIGraphXProviderOptions::migraphx_use_native_calibration_table"][::std::mem::offset_of!(
        OrtMIGraphXProviderOptions,
        migraphx_use_native_calibration_table
    )
        - 12usize];
    ["Offset of field: OrtMIGraphXProviderOptions::migraphx_int8_calibration_table_name"][::std::mem::offset_of!(
        OrtMIGraphXProviderOptions,
        migraphx_int8_calibration_table_name
    )
        - 16usize];
    ["Offset of field: OrtMIGraphXProviderOptions::migraphx_save_compiled_model"][::std::mem::offset_of!(
        OrtMIGraphXProviderOptions,
        migraphx_save_compiled_model
    ) - 24usize];
    ["Offset of field: OrtMIGraphXProviderOptions::migraphx_save_model_path"]
        [::std::mem::offset_of!(OrtMIGraphXProviderOptions, migraphx_save_model_path) - 32usize];
    ["Offset of field: OrtMIGraphXProviderOptions::migraphx_load_compiled_model"][::std::mem::offset_of!(
        OrtMIGraphXProviderOptions,
        migraphx_load_compiled_model
    ) - 40usize];
    ["Offset of field: OrtMIGraphXProviderOptions::migraphx_load_model_path"]
        [::std::mem::offset_of!(OrtMIGraphXProviderOptions, migraphx_load_model_path) - 48usize];
};
#[doc = " \\brief OpenVINO Provider Options\n\n \\see OrtApi::SessionOptionsAppendExecutionProvider_OpenVINO"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtOpenVINOProviderOptions {
    #[doc = " \\brief Device type string\n\n Valid settings are one of: \"CPU_FP32\", \"CPU_FP16\", \"GPU_FP32\", \"GPU_FP16\""]
    pub device_type: *const ::std::os::raw::c_char,
    #[doc = "< 0 = disabled, nonzero = enabled"]
    pub enable_npu_fast_compile: ::std::os::raw::c_uchar,
    pub device_id: *const ::std::os::raw::c_char,
    #[doc = "< 0 = Use default number of threads"]
    pub num_of_threads: usize,
    pub cache_dir: *const ::std::os::raw::c_char,
    pub context: *mut ::std::os::raw::c_void,
    #[doc = "< 0 = disabled, nonzero = enabled"]
    pub enable_opencl_throttling: ::std::os::raw::c_uchar,
    #[doc = "< 0 = disabled, nonzero = enabled"]
    pub enable_dynamic_shapes: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OrtOpenVINOProviderOptions"]
        [::std::mem::size_of::<OrtOpenVINOProviderOptions>() - 56usize];
    ["Alignment of OrtOpenVINOProviderOptions"]
        [::std::mem::align_of::<OrtOpenVINOProviderOptions>() - 8usize];
    ["Offset of field: OrtOpenVINOProviderOptions::device_type"]
        [::std::mem::offset_of!(OrtOpenVINOProviderOptions, device_type) - 0usize];
    ["Offset of field: OrtOpenVINOProviderOptions::enable_npu_fast_compile"]
        [::std::mem::offset_of!(OrtOpenVINOProviderOptions, enable_npu_fast_compile) - 8usize];
    ["Offset of field: OrtOpenVINOProviderOptions::device_id"]
        [::std::mem::offset_of!(OrtOpenVINOProviderOptions, device_id) - 16usize];
    ["Offset of field: OrtOpenVINOProviderOptions::num_of_threads"]
        [::std::mem::offset_of!(OrtOpenVINOProviderOptions, num_of_threads) - 24usize];
    ["Offset of field: OrtOpenVINOProviderOptions::cache_dir"]
        [::std::mem::offset_of!(OrtOpenVINOProviderOptions, cache_dir) - 32usize];
    ["Offset of field: OrtOpenVINOProviderOptions::context"]
        [::std::mem::offset_of!(OrtOpenVINOProviderOptions, context) - 40usize];
    ["Offset of field: OrtOpenVINOProviderOptions::enable_opencl_throttling"]
        [::std::mem::offset_of!(OrtOpenVINOProviderOptions, enable_opencl_throttling) - 48usize];
    ["Offset of field: OrtOpenVINOProviderOptions::enable_dynamic_shapes"]
        [::std::mem::offset_of!(OrtOpenVINOProviderOptions, enable_dynamic_shapes) - 49usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtTrainingApi {
    _unused: [u8; 0],
}
#[doc = " \\brief The helper interface to get the right version of OrtApi\n\n Get a pointer to this structure through ::OrtGetApiBase"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtApiBase {
    #[doc = " \\brief Get a pointer to the requested version of the ::OrtApi\n\n \\param[in] version Must be ::ORT_API_VERSION\n \\return The ::OrtApi for the version requested, nullptr will be returned if this version is unsupported, for example when using a runtime\n   older than the version created with this header file.\n\n One can call GetVersionString() to get the version of the Onnxruntime library for logging\n and error reporting purposes."]
    pub GetApi: ::std::option::Option<unsafe extern "C" fn(version: u32) -> *const OrtApi>,
    #[doc = " \\brief Returns a null terminated string of the version of the Onnxruntime library (eg: \"1.8.1\")\n\n  \\return UTF-8 encoded version string. Do not deallocate the returned buffer."]
    pub GetVersionString:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OrtApiBase"][::std::mem::size_of::<OrtApiBase>() - 16usize];
    ["Alignment of OrtApiBase"][::std::mem::align_of::<OrtApiBase>() - 8usize];
    ["Offset of field: OrtApiBase::GetApi"][::std::mem::offset_of!(OrtApiBase, GetApi) - 0usize];
    ["Offset of field: OrtApiBase::GetVersionString"]
        [::std::mem::offset_of!(OrtApiBase, GetVersionString) - 8usize];
};
extern "C" {
    #[doc = " \\brief The Onnxruntime library's entry point to access the C API\n\n Call this to get the a pointer to an ::OrtApiBase"]
    pub fn OrtGetApiBase() -> *const OrtApiBase;
}
#[doc = " \\brief Thread work loop function\n\n Onnxruntime will provide the working loop on custom thread creation\n Argument is an onnxruntime built-in type which will be provided when thread pool calls OrtCustomCreateThreadFn"]
pub type OrtThreadWorkerFn =
    ::std::option::Option<unsafe extern "C" fn(ort_worker_fn_param: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtCustomHandleType {
    pub __place_holder: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OrtCustomHandleType"][::std::mem::size_of::<OrtCustomHandleType>() - 1usize];
    ["Alignment of OrtCustomHandleType"][::std::mem::align_of::<OrtCustomHandleType>() - 1usize];
    ["Offset of field: OrtCustomHandleType::__place_holder"]
        [::std::mem::offset_of!(OrtCustomHandleType, __place_holder) - 0usize];
};
pub type OrtCustomThreadHandle = *const OrtCustomHandleType;
#[doc = " \\brief Ort custom thread creation function\n\n The function should return a thread handle to be used in onnxruntime thread pools\n Onnxruntime will throw exception on return value of nullptr or 0, indicating that the function failed to create a thread"]
pub type OrtCustomCreateThreadFn = ::std::option::Option<
    unsafe extern "C" fn(
        ort_custom_thread_creation_options: *mut ::std::os::raw::c_void,
        ort_thread_worker_fn: OrtThreadWorkerFn,
        ort_worker_fn_param: *mut ::std::os::raw::c_void,
    ) -> OrtCustomThreadHandle,
>;
#[doc = " \\brief Custom thread join function\n\n Onnxruntime thread pool destructor will call the function to join a custom thread.\n Argument ort_custom_thread_handle is the value returned by OrtCustomCreateThreadFn"]
pub type OrtCustomJoinThreadFn =
    ::std::option::Option<unsafe extern "C" fn(ort_custom_thread_handle: OrtCustomThreadHandle)>;
pub type RegisterCustomOpsFn = ::std::option::Option<
    unsafe extern "C" fn(options: *mut OrtSessionOptions, api: *const OrtApiBase) -> *mut OrtStatus,
>;
#[doc = " \\brief Callback function for RunAsync\n\n \\param[in] user_data User specific data that passed back to the callback\n \\param[out] outputs On succeed, outputs host inference results, on error, the value will be nullptr\n \\param[out] num_outputs Number of outputs, on error, the value will be zero\n \\param[out] status On error, status will provide details"]
pub type RunAsyncCallbackFn = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        outputs: *mut *mut OrtValue,
        num_outputs: usize,
        status: OrtStatusPtr,
    ),
>;
#[doc = " \\brief The C API\n\n All C API functions are defined inside this structure as pointers to functions.\n Call OrtApiBase::GetApi to get a pointer to it\n\n \\nosubgrouping"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtApi {
    #[doc = " \\brief Create an OrtStatus from a null terminated string\n\n \\param[in] code\n \\param[in] msg A null-terminated string. Its contents will be copied.\n \\return A new OrtStatus object, must be destroyed with OrtApi::ReleaseStatus"]
    pub CreateStatus: ::std::option::Option<
        unsafe extern "C" fn(
            code: OrtErrorCode,
            msg: *const ::std::os::raw::c_char,
        ) -> *mut OrtStatus,
    >,
    #[doc = " \\brief Get OrtErrorCode from OrtStatus\n\n \\param[in] status\n \\return OrtErrorCode that \\p status was created with"]
    pub GetErrorCode:
        ::std::option::Option<unsafe extern "C" fn(status: *const OrtStatus) -> OrtErrorCode>,
    #[doc = " \\brief Get error string from OrtStatus\n\n \\param[in] status\n \\return The error message inside the `status`. Do not free the returned value."]
    pub GetErrorMessage: ::std::option::Option<
        unsafe extern "C" fn(status: *const OrtStatus) -> *const ::std::os::raw::c_char,
    >,
    pub CreateEnv: ::std::option::Option<
        unsafe extern "C" fn(
            log_severity_level: OrtLoggingLevel,
            logid: *const ::std::os::raw::c_char,
            out: *mut *mut OrtEnv,
        ) -> OrtStatusPtr,
    >,
    pub CreateEnvWithCustomLogger: ::std::option::Option<
        unsafe extern "C" fn(
            logging_function: OrtLoggingFunction,
            logger_param: *mut ::std::os::raw::c_void,
            log_severity_level: OrtLoggingLevel,
            logid: *const ::std::os::raw::c_char,
            out: *mut *mut OrtEnv,
        ) -> OrtStatusPtr,
    >,
    pub EnableTelemetryEvents:
        ::std::option::Option<unsafe extern "C" fn(env: *const OrtEnv) -> OrtStatusPtr>,
    pub DisableTelemetryEvents:
        ::std::option::Option<unsafe extern "C" fn(env: *const OrtEnv) -> OrtStatusPtr>,
    pub CreateSession: ::std::option::Option<
        unsafe extern "C" fn(
            env: *const OrtEnv,
            model_path: *const ::std::os::raw::c_char,
            options: *const OrtSessionOptions,
            out: *mut *mut OrtSession,
        ) -> OrtStatusPtr,
    >,
    pub CreateSessionFromArray: ::std::option::Option<
        unsafe extern "C" fn(
            env: *const OrtEnv,
            model_data: *const ::std::os::raw::c_void,
            model_data_length: usize,
            options: *const OrtSessionOptions,
            out: *mut *mut OrtSession,
        ) -> OrtStatusPtr,
    >,
    pub Run: ::std::option::Option<
        unsafe extern "C" fn(
            session: *mut OrtSession,
            run_options: *const OrtRunOptions,
            input_names: *const *const ::std::os::raw::c_char,
            inputs: *const *const OrtValue,
            input_len: usize,
            output_names: *const *const ::std::os::raw::c_char,
            output_names_len: usize,
            outputs: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub CreateSessionOptions: ::std::option::Option<
        unsafe extern "C" fn(options: *mut *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub SetOptimizedModelFilePath: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            optimized_model_filepath: *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub CloneSessionOptions: ::std::option::Option<
        unsafe extern "C" fn(
            in_options: *const OrtSessionOptions,
            out_options: *mut *mut OrtSessionOptions,
        ) -> OrtStatusPtr,
    >,
    pub SetSessionExecutionMode: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            execution_mode: ExecutionMode,
        ) -> OrtStatusPtr,
    >,
    pub EnableProfiling: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            profile_file_prefix: *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub DisableProfiling: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub EnableMemPattern: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub DisableMemPattern: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub EnableCpuMemArena: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub DisableCpuMemArena: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub SetSessionLogId: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            logid: *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub SetSessionLogVerbosityLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            session_log_verbosity_level: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub SetSessionLogSeverityLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            session_log_severity_level: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub SetSessionGraphOptimizationLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            graph_optimization_level: GraphOptimizationLevel,
        ) -> OrtStatusPtr,
    >,
    pub SetIntraOpNumThreads: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            intra_op_num_threads: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub SetInterOpNumThreads: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            inter_op_num_threads: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub CreateCustomOpDomain: ::std::option::Option<
        unsafe extern "C" fn(
            domain: *const ::std::os::raw::c_char,
            out: *mut *mut OrtCustomOpDomain,
        ) -> OrtStatusPtr,
    >,
    pub CustomOpDomain_Add: ::std::option::Option<
        unsafe extern "C" fn(
            custom_op_domain: *mut OrtCustomOpDomain,
            op: *const OrtCustomOp,
        ) -> OrtStatusPtr,
    >,
    pub AddCustomOpDomain: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            custom_op_domain: *mut OrtCustomOpDomain,
        ) -> OrtStatusPtr,
    >,
    pub RegisterCustomOpsLibrary: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            library_path: *const ::std::os::raw::c_char,
            library_handle: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetInputCount: ::std::option::Option<
        unsafe extern "C" fn(session: *const OrtSession, out: *mut usize) -> OrtStatusPtr,
    >,
    pub SessionGetOutputCount: ::std::option::Option<
        unsafe extern "C" fn(session: *const OrtSession, out: *mut usize) -> OrtStatusPtr,
    >,
    pub SessionGetOverridableInitializerCount: ::std::option::Option<
        unsafe extern "C" fn(session: *const OrtSession, out: *mut usize) -> OrtStatusPtr,
    >,
    pub SessionGetInputTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            session: *const OrtSession,
            index: usize,
            type_info: *mut *mut OrtTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetOutputTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            session: *const OrtSession,
            index: usize,
            type_info: *mut *mut OrtTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetOverridableInitializerTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            session: *const OrtSession,
            index: usize,
            type_info: *mut *mut OrtTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetInputName: ::std::option::Option<
        unsafe extern "C" fn(
            session: *const OrtSession,
            index: usize,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetOutputName: ::std::option::Option<
        unsafe extern "C" fn(
            session: *const OrtSession,
            index: usize,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetOverridableInitializerName: ::std::option::Option<
        unsafe extern "C" fn(
            session: *const OrtSession,
            index: usize,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub CreateRunOptions:
        ::std::option::Option<unsafe extern "C" fn(out: *mut *mut OrtRunOptions) -> OrtStatusPtr>,
    pub RunOptionsSetRunLogVerbosityLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtRunOptions,
            log_verbosity_level: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub RunOptionsSetRunLogSeverityLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtRunOptions,
            log_severity_level: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub RunOptionsSetRunTag: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtRunOptions,
            run_tag: *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub RunOptionsGetRunLogVerbosityLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *const OrtRunOptions,
            log_verbosity_level: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub RunOptionsGetRunLogSeverityLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *const OrtRunOptions,
            log_severity_level: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub RunOptionsGetRunTag: ::std::option::Option<
        unsafe extern "C" fn(
            options: *const OrtRunOptions,
            run_tag: *mut *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub RunOptionsSetTerminate:
        ::std::option::Option<unsafe extern "C" fn(options: *mut OrtRunOptions) -> OrtStatusPtr>,
    pub RunOptionsUnsetTerminate:
        ::std::option::Option<unsafe extern "C" fn(options: *mut OrtRunOptions) -> OrtStatusPtr>,
    pub CreateTensorAsOrtValue: ::std::option::Option<
        unsafe extern "C" fn(
            allocator: *mut OrtAllocator,
            shape: *const i64,
            shape_len: usize,
            type_: ONNXTensorElementDataType,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub CreateTensorWithDataAsOrtValue: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtMemoryInfo,
            p_data: *mut ::std::os::raw::c_void,
            p_data_len: usize,
            shape: *const i64,
            shape_len: usize,
            type_: ONNXTensorElementDataType,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub IsTensor: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            out: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub GetTensorMutableData: ::std::option::Option<
        unsafe extern "C" fn(
            value: *mut OrtValue,
            out: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub FillStringTensor: ::std::option::Option<
        unsafe extern "C" fn(
            value: *mut OrtValue,
            s: *const *const ::std::os::raw::c_char,
            s_len: usize,
        ) -> OrtStatusPtr,
    >,
    pub GetStringTensorDataLength: ::std::option::Option<
        unsafe extern "C" fn(value: *const OrtValue, len: *mut usize) -> OrtStatusPtr,
    >,
    pub GetStringTensorContent: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            s: *mut ::std::os::raw::c_void,
            s_len: usize,
            offsets: *mut usize,
            offsets_len: usize,
        ) -> OrtStatusPtr,
    >,
    pub CastTypeInfoToTensorInfo: ::std::option::Option<
        unsafe extern "C" fn(
            type_info: *const OrtTypeInfo,
            out: *mut *const OrtTensorTypeAndShapeInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetOnnxTypeFromTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(type_info: *const OrtTypeInfo, out: *mut ONNXType) -> OrtStatusPtr,
    >,
    pub CreateTensorTypeAndShapeInfo: ::std::option::Option<
        unsafe extern "C" fn(out: *mut *mut OrtTensorTypeAndShapeInfo) -> OrtStatusPtr,
    >,
    pub SetTensorElementType: ::std::option::Option<
        unsafe extern "C" fn(
            info: *mut OrtTensorTypeAndShapeInfo,
            type_: ONNXTensorElementDataType,
        ) -> OrtStatusPtr,
    >,
    pub SetDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            info: *mut OrtTensorTypeAndShapeInfo,
            dim_values: *const i64,
            dim_count: usize,
        ) -> OrtStatusPtr,
    >,
    pub GetTensorElementType: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtTensorTypeAndShapeInfo,
            out: *mut ONNXTensorElementDataType,
        ) -> OrtStatusPtr,
    >,
    pub GetDimensionsCount: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtTensorTypeAndShapeInfo,
            out: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub GetDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtTensorTypeAndShapeInfo,
            dim_values: *mut i64,
            dim_values_length: usize,
        ) -> OrtStatusPtr,
    >,
    pub GetSymbolicDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtTensorTypeAndShapeInfo,
            dim_params: *mut *const ::std::os::raw::c_char,
            dim_params_length: usize,
        ) -> OrtStatusPtr,
    >,
    pub GetTensorShapeElementCount: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtTensorTypeAndShapeInfo,
            out: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub GetTensorTypeAndShape: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            out: *mut *mut OrtTensorTypeAndShapeInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(value: *const OrtValue, out: *mut *mut OrtTypeInfo) -> OrtStatusPtr,
    >,
    pub GetValueType: ::std::option::Option<
        unsafe extern "C" fn(value: *const OrtValue, out: *mut ONNXType) -> OrtStatusPtr,
    >,
    pub CreateMemoryInfo: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            type_: OrtAllocatorType,
            id: ::std::os::raw::c_int,
            mem_type: OrtMemType,
            out: *mut *mut OrtMemoryInfo,
        ) -> OrtStatusPtr,
    >,
    pub CreateCpuMemoryInfo: ::std::option::Option<
        unsafe extern "C" fn(
            type_: OrtAllocatorType,
            mem_type: OrtMemType,
            out: *mut *mut OrtMemoryInfo,
        ) -> OrtStatusPtr,
    >,
    pub CompareMemoryInfo: ::std::option::Option<
        unsafe extern "C" fn(
            info1: *const OrtMemoryInfo,
            info2: *const OrtMemoryInfo,
            out: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub MemoryInfoGetName: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *const OrtMemoryInfo,
            out: *mut *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub MemoryInfoGetId: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *const OrtMemoryInfo,
            out: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub MemoryInfoGetMemType: ::std::option::Option<
        unsafe extern "C" fn(ptr: *const OrtMemoryInfo, out: *mut OrtMemType) -> OrtStatusPtr,
    >,
    pub MemoryInfoGetType: ::std::option::Option<
        unsafe extern "C" fn(ptr: *const OrtMemoryInfo, out: *mut OrtAllocatorType) -> OrtStatusPtr,
    >,
    pub AllocatorAlloc: ::std::option::Option<
        unsafe extern "C" fn(
            ort_allocator: *mut OrtAllocator,
            size: usize,
            out: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub AllocatorFree: ::std::option::Option<
        unsafe extern "C" fn(
            ort_allocator: *mut OrtAllocator,
            p: *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub AllocatorGetInfo: ::std::option::Option<
        unsafe extern "C" fn(
            ort_allocator: *const OrtAllocator,
            out: *mut *const OrtMemoryInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetAllocatorWithDefaultOptions:
        ::std::option::Option<unsafe extern "C" fn(out: *mut *mut OrtAllocator) -> OrtStatusPtr>,
    pub AddFreeDimensionOverride: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            dim_denotation: *const ::std::os::raw::c_char,
            dim_value: i64,
        ) -> OrtStatusPtr,
    >,
    pub GetValue: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            index: ::std::os::raw::c_int,
            allocator: *mut OrtAllocator,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub GetValueCount: ::std::option::Option<
        unsafe extern "C" fn(value: *const OrtValue, out: *mut usize) -> OrtStatusPtr,
    >,
    pub CreateValue: ::std::option::Option<
        unsafe extern "C" fn(
            in_: *const *const OrtValue,
            num_values: usize,
            value_type: ONNXType,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub CreateOpaqueValue: ::std::option::Option<
        unsafe extern "C" fn(
            domain_name: *const ::std::os::raw::c_char,
            type_name: *const ::std::os::raw::c_char,
            data_container: *const ::std::os::raw::c_void,
            data_container_size: usize,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub GetOpaqueValue: ::std::option::Option<
        unsafe extern "C" fn(
            domain_name: *const ::std::os::raw::c_char,
            type_name: *const ::std::os::raw::c_char,
            in_: *const OrtValue,
            data_container: *mut ::std::os::raw::c_void,
            data_container_size: usize,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfoGetAttribute_float: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            name: *const ::std::os::raw::c_char,
            out: *mut f32,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfoGetAttribute_int64: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            name: *const ::std::os::raw::c_char,
            out: *mut i64,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfoGetAttribute_string: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            name: *const ::std::os::raw::c_char,
            out: *mut ::std::os::raw::c_char,
            size: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub KernelContext_GetInputCount: ::std::option::Option<
        unsafe extern "C" fn(context: *const OrtKernelContext, out: *mut usize) -> OrtStatusPtr,
    >,
    pub KernelContext_GetOutputCount: ::std::option::Option<
        unsafe extern "C" fn(context: *const OrtKernelContext, out: *mut usize) -> OrtStatusPtr,
    >,
    pub KernelContext_GetInput: ::std::option::Option<
        unsafe extern "C" fn(
            context: *const OrtKernelContext,
            index: usize,
            out: *mut *const OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub KernelContext_GetOutput: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut OrtKernelContext,
            index: usize,
            dim_values: *const i64,
            dim_count: usize,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseEnv: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtEnv)>,
    pub ReleaseStatus: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtStatus)>,
    pub ReleaseMemoryInfo: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtMemoryInfo)>,
    pub ReleaseSession: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtSession)>,
    pub ReleaseValue: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtValue)>,
    pub ReleaseRunOptions: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtRunOptions)>,
    pub ReleaseTypeInfo: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtTypeInfo)>,
    pub ReleaseTensorTypeAndShapeInfo:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtTensorTypeAndShapeInfo)>,
    pub ReleaseSessionOptions:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtSessionOptions)>,
    pub ReleaseCustomOpDomain:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtCustomOpDomain)>,
    pub GetDenotationFromTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            type_info: *const OrtTypeInfo,
            denotation: *mut *const ::std::os::raw::c_char,
            len: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub CastTypeInfoToMapTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            type_info: *const OrtTypeInfo,
            out: *mut *const OrtMapTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub CastTypeInfoToSequenceTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            type_info: *const OrtTypeInfo,
            out: *mut *const OrtSequenceTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetMapKeyType: ::std::option::Option<
        unsafe extern "C" fn(
            map_type_info: *const OrtMapTypeInfo,
            out: *mut ONNXTensorElementDataType,
        ) -> OrtStatusPtr,
    >,
    pub GetMapValueType: ::std::option::Option<
        unsafe extern "C" fn(
            map_type_info: *const OrtMapTypeInfo,
            type_info: *mut *mut OrtTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetSequenceElementType: ::std::option::Option<
        unsafe extern "C" fn(
            sequence_type_info: *const OrtSequenceTypeInfo,
            type_info: *mut *mut OrtTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseMapTypeInfo: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtMapTypeInfo)>,
    pub ReleaseSequenceTypeInfo:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtSequenceTypeInfo)>,
    pub SessionEndProfiling: ::std::option::Option<
        unsafe extern "C" fn(
            session: *mut OrtSession,
            allocator: *mut OrtAllocator,
            out: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetModelMetadata: ::std::option::Option<
        unsafe extern "C" fn(
            session: *const OrtSession,
            out: *mut *mut OrtModelMetadata,
        ) -> OrtStatusPtr,
    >,
    pub ModelMetadataGetProducerName: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub ModelMetadataGetGraphName: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub ModelMetadataGetDomain: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub ModelMetadataGetDescription: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub ModelMetadataLookupCustomMetadataMap: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            key: *const ::std::os::raw::c_char,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub ModelMetadataGetVersion: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            value: *mut i64,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseModelMetadata:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtModelMetadata)>,
    pub CreateEnvWithGlobalThreadPools: ::std::option::Option<
        unsafe extern "C" fn(
            log_severity_level: OrtLoggingLevel,
            logid: *const ::std::os::raw::c_char,
            tp_options: *const OrtThreadingOptions,
            out: *mut *mut OrtEnv,
        ) -> OrtStatusPtr,
    >,
    pub DisablePerSessionThreads: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub CreateThreadingOptions: ::std::option::Option<
        unsafe extern "C" fn(out: *mut *mut OrtThreadingOptions) -> OrtStatusPtr,
    >,
    pub ReleaseThreadingOptions:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtThreadingOptions)>,
    pub ModelMetadataGetCustomMetadataMapKeys: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            keys: *mut *mut *mut ::std::os::raw::c_char,
            num_keys: *mut i64,
        ) -> OrtStatusPtr,
    >,
    pub AddFreeDimensionOverrideByName: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            dim_name: *const ::std::os::raw::c_char,
            dim_value: i64,
        ) -> OrtStatusPtr,
    >,
    pub GetAvailableProviders: ::std::option::Option<
        unsafe extern "C" fn(
            out_ptr: *mut *mut *mut ::std::os::raw::c_char,
            provider_length: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseAvailableProviders: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut *mut ::std::os::raw::c_char,
            providers_length: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub GetStringTensorElementLength: ::std::option::Option<
        unsafe extern "C" fn(value: *const OrtValue, index: usize, out: *mut usize) -> OrtStatusPtr,
    >,
    pub GetStringTensorElement: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            s_len: usize,
            index: usize,
            s: *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub FillStringTensorElement: ::std::option::Option<
        unsafe extern "C" fn(
            value: *mut OrtValue,
            s: *const ::std::os::raw::c_char,
            index: usize,
        ) -> OrtStatusPtr,
    >,
    pub AddSessionConfigEntry: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            config_key: *const ::std::os::raw::c_char,
            config_value: *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub CreateAllocator: ::std::option::Option<
        unsafe extern "C" fn(
            session: *const OrtSession,
            mem_info: *const OrtMemoryInfo,
            out: *mut *mut OrtAllocator,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseAllocator: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtAllocator)>,
    pub RunWithBinding: ::std::option::Option<
        unsafe extern "C" fn(
            session: *mut OrtSession,
            run_options: *const OrtRunOptions,
            binding_ptr: *const OrtIoBinding,
        ) -> OrtStatusPtr,
    >,
    pub CreateIoBinding: ::std::option::Option<
        unsafe extern "C" fn(session: *mut OrtSession, out: *mut *mut OrtIoBinding) -> OrtStatusPtr,
    >,
    pub ReleaseIoBinding: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtIoBinding)>,
    pub BindInput: ::std::option::Option<
        unsafe extern "C" fn(
            binding_ptr: *mut OrtIoBinding,
            name: *const ::std::os::raw::c_char,
            val_ptr: *const OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub BindOutput: ::std::option::Option<
        unsafe extern "C" fn(
            binding_ptr: *mut OrtIoBinding,
            name: *const ::std::os::raw::c_char,
            val_ptr: *const OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub BindOutputToDevice: ::std::option::Option<
        unsafe extern "C" fn(
            binding_ptr: *mut OrtIoBinding,
            name: *const ::std::os::raw::c_char,
            mem_info_ptr: *const OrtMemoryInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetBoundOutputNames: ::std::option::Option<
        unsafe extern "C" fn(
            binding_ptr: *const OrtIoBinding,
            allocator: *mut OrtAllocator,
            buffer: *mut *mut ::std::os::raw::c_char,
            lengths: *mut *mut usize,
            count: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub GetBoundOutputValues: ::std::option::Option<
        unsafe extern "C" fn(
            binding_ptr: *const OrtIoBinding,
            allocator: *mut OrtAllocator,
            output: *mut *mut *mut OrtValue,
            output_count: *mut usize,
        ) -> OrtStatusPtr,
    >,
    #[doc = " \\brief Clears any previously set Inputs for an ::OrtIoBinding"]
    pub ClearBoundInputs:
        ::std::option::Option<unsafe extern "C" fn(binding_ptr: *mut OrtIoBinding)>,
    #[doc = " \\brief Clears any previously set Outputs for an ::OrtIoBinding"]
    pub ClearBoundOutputs:
        ::std::option::Option<unsafe extern "C" fn(binding_ptr: *mut OrtIoBinding)>,
    pub TensorAt: ::std::option::Option<
        unsafe extern "C" fn(
            value: *mut OrtValue,
            location_values: *const i64,
            location_values_count: usize,
            out: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub CreateAndRegisterAllocator: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut OrtEnv,
            mem_info: *const OrtMemoryInfo,
            arena_cfg: *const OrtArenaCfg,
        ) -> OrtStatusPtr,
    >,
    pub SetLanguageProjection: ::std::option::Option<
        unsafe extern "C" fn(
            ort_env: *const OrtEnv,
            projection: OrtLanguageProjection,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetProfilingStartTimeNs: ::std::option::Option<
        unsafe extern "C" fn(session: *const OrtSession, out: *mut u64) -> OrtStatusPtr,
    >,
    pub SetGlobalIntraOpNumThreads: ::std::option::Option<
        unsafe extern "C" fn(
            tp_options: *mut OrtThreadingOptions,
            intra_op_num_threads: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub SetGlobalInterOpNumThreads: ::std::option::Option<
        unsafe extern "C" fn(
            tp_options: *mut OrtThreadingOptions,
            inter_op_num_threads: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub SetGlobalSpinControl: ::std::option::Option<
        unsafe extern "C" fn(
            tp_options: *mut OrtThreadingOptions,
            allow_spinning: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub AddInitializer: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            name: *const ::std::os::raw::c_char,
            val: *const OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub CreateEnvWithCustomLoggerAndGlobalThreadPools: ::std::option::Option<
        unsafe extern "C" fn(
            logging_function: OrtLoggingFunction,
            logger_param: *mut ::std::os::raw::c_void,
            log_severity_level: OrtLoggingLevel,
            logid: *const ::std::os::raw::c_char,
            tp_options: *const OrtThreadingOptions,
            out: *mut *mut OrtEnv,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsAppendExecutionProvider_CUDA: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            cuda_options: *const OrtCUDAProviderOptions,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsAppendExecutionProvider_ROCM: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            rocm_options: *const OrtROCMProviderOptions,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsAppendExecutionProvider_OpenVINO: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            provider_options: *const OrtOpenVINOProviderOptions,
        ) -> OrtStatusPtr,
    >,
    pub SetGlobalDenormalAsZero: ::std::option::Option<
        unsafe extern "C" fn(tp_options: *mut OrtThreadingOptions) -> OrtStatusPtr,
    >,
    pub CreateArenaCfg: ::std::option::Option<
        unsafe extern "C" fn(
            max_mem: usize,
            arena_extend_strategy: ::std::os::raw::c_int,
            initial_chunk_size_bytes: ::std::os::raw::c_int,
            max_dead_bytes_per_chunk: ::std::os::raw::c_int,
            out: *mut *mut OrtArenaCfg,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseArenaCfg: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtArenaCfg)>,
    pub ModelMetadataGetGraphDescription: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsAppendExecutionProvider_TensorRT: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            tensorrt_options: *const OrtTensorRTProviderOptions,
        ) -> OrtStatusPtr,
    >,
    pub SetCurrentGpuDeviceId: ::std::option::Option<
        unsafe extern "C" fn(device_id: ::std::os::raw::c_int) -> OrtStatusPtr,
    >,
    pub GetCurrentGpuDeviceId: ::std::option::Option<
        unsafe extern "C" fn(device_id: *mut ::std::os::raw::c_int) -> OrtStatusPtr,
    >,
    pub KernelInfoGetAttributeArray_float: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            name: *const ::std::os::raw::c_char,
            out: *mut f32,
            size: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfoGetAttributeArray_int64: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            name: *const ::std::os::raw::c_char,
            out: *mut i64,
            size: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub CreateArenaCfgV2: ::std::option::Option<
        unsafe extern "C" fn(
            arena_config_keys: *const *const ::std::os::raw::c_char,
            arena_config_values: *const usize,
            num_keys: usize,
            out: *mut *mut OrtArenaCfg,
        ) -> OrtStatusPtr,
    >,
    pub AddRunConfigEntry: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtRunOptions,
            config_key: *const ::std::os::raw::c_char,
            config_value: *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub CreatePrepackedWeightsContainer: ::std::option::Option<
        unsafe extern "C" fn(out: *mut *mut OrtPrepackedWeightsContainer) -> OrtStatusPtr,
    >,
    pub ReleasePrepackedWeightsContainer:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtPrepackedWeightsContainer)>,
    pub CreateSessionWithPrepackedWeightsContainer: ::std::option::Option<
        unsafe extern "C" fn(
            env: *const OrtEnv,
            model_path: *const ::std::os::raw::c_char,
            options: *const OrtSessionOptions,
            prepacked_weights_container: *mut OrtPrepackedWeightsContainer,
            out: *mut *mut OrtSession,
        ) -> OrtStatusPtr,
    >,
    pub CreateSessionFromArrayWithPrepackedWeightsContainer: ::std::option::Option<
        unsafe extern "C" fn(
            env: *const OrtEnv,
            model_data: *const ::std::os::raw::c_void,
            model_data_length: usize,
            options: *const OrtSessionOptions,
            prepacked_weights_container: *mut OrtPrepackedWeightsContainer,
            out: *mut *mut OrtSession,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsAppendExecutionProvider_TensorRT_V2: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            tensorrt_options: *const OrtTensorRTProviderOptionsV2,
        ) -> OrtStatusPtr,
    >,
    pub CreateTensorRTProviderOptions: ::std::option::Option<
        unsafe extern "C" fn(out: *mut *mut OrtTensorRTProviderOptionsV2) -> OrtStatusPtr,
    >,
    pub UpdateTensorRTProviderOptions: ::std::option::Option<
        unsafe extern "C" fn(
            tensorrt_options: *mut OrtTensorRTProviderOptionsV2,
            provider_options_keys: *const *const ::std::os::raw::c_char,
            provider_options_values: *const *const ::std::os::raw::c_char,
            num_keys: usize,
        ) -> OrtStatusPtr,
    >,
    pub GetTensorRTProviderOptionsAsString: ::std::option::Option<
        unsafe extern "C" fn(
            tensorrt_options: *const OrtTensorRTProviderOptionsV2,
            allocator: *mut OrtAllocator,
            ptr: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    #[doc = " \\brief Release an ::OrtTensorRTProviderOptionsV2\n\n \\note This is an exception in the naming convention of other Release* functions, as the name of the method does not have the V2 suffix, but the type does"]
    pub ReleaseTensorRTProviderOptions:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtTensorRTProviderOptionsV2)>,
    pub EnableOrtCustomOps: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub RegisterAllocator: ::std::option::Option<
        unsafe extern "C" fn(env: *mut OrtEnv, allocator: *mut OrtAllocator) -> OrtStatusPtr,
    >,
    pub UnregisterAllocator: ::std::option::Option<
        unsafe extern "C" fn(env: *mut OrtEnv, mem_info: *const OrtMemoryInfo) -> OrtStatusPtr,
    >,
    pub IsSparseTensor: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            out: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub CreateSparseTensorAsOrtValue: ::std::option::Option<
        unsafe extern "C" fn(
            allocator: *mut OrtAllocator,
            dense_shape: *const i64,
            dense_shape_len: usize,
            type_: ONNXTensorElementDataType,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub FillSparseTensorCoo: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *mut OrtValue,
            data_mem_info: *const OrtMemoryInfo,
            values_shape: *const i64,
            values_shape_len: usize,
            values: *const ::std::os::raw::c_void,
            indices_data: *const i64,
            indices_num: usize,
        ) -> OrtStatusPtr,
    >,
    pub FillSparseTensorCsr: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *mut OrtValue,
            data_mem_info: *const OrtMemoryInfo,
            values_shape: *const i64,
            values_shape_len: usize,
            values: *const ::std::os::raw::c_void,
            inner_indices_data: *const i64,
            inner_indices_num: usize,
            outer_indices_data: *const i64,
            outer_indices_num: usize,
        ) -> OrtStatusPtr,
    >,
    pub FillSparseTensorBlockSparse: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *mut OrtValue,
            data_mem_info: *const OrtMemoryInfo,
            values_shape: *const i64,
            values_shape_len: usize,
            values: *const ::std::os::raw::c_void,
            indices_shape_data: *const i64,
            indices_shape_len: usize,
            indices_data: *const i32,
        ) -> OrtStatusPtr,
    >,
    pub CreateSparseTensorWithValuesAsOrtValue: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtMemoryInfo,
            p_data: *mut ::std::os::raw::c_void,
            dense_shape: *const i64,
            dense_shape_len: usize,
            values_shape: *const i64,
            values_shape_len: usize,
            type_: ONNXTensorElementDataType,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub UseCooIndices: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *mut OrtValue,
            indices_data: *mut i64,
            indices_num: usize,
        ) -> OrtStatusPtr,
    >,
    pub UseCsrIndices: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *mut OrtValue,
            inner_data: *mut i64,
            inner_num: usize,
            outer_data: *mut i64,
            outer_num: usize,
        ) -> OrtStatusPtr,
    >,
    pub UseBlockSparseIndices: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *mut OrtValue,
            indices_shape: *const i64,
            indices_shape_len: usize,
            indices_data: *mut i32,
        ) -> OrtStatusPtr,
    >,
    pub GetSparseTensorFormat: ::std::option::Option<
        unsafe extern "C" fn(ort_value: *const OrtValue, out: *mut OrtSparseFormat) -> OrtStatusPtr,
    >,
    pub GetSparseTensorValuesTypeAndShape: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *const OrtValue,
            out: *mut *mut OrtTensorTypeAndShapeInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetSparseTensorValues: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *const OrtValue,
            out: *mut *const ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub GetSparseTensorIndicesTypeShape: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *const OrtValue,
            indices_format: OrtSparseIndicesFormat,
            out: *mut *mut OrtTensorTypeAndShapeInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetSparseTensorIndices: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *const OrtValue,
            indices_format: OrtSparseIndicesFormat,
            num_indices: *mut usize,
            indices: *mut *const ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub HasValue: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            out: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub KernelContext_GetGPUComputeStream: ::std::option::Option<
        unsafe extern "C" fn(
            context: *const OrtKernelContext,
            out: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub GetTensorMemoryInfo: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            mem_info: *mut *const OrtMemoryInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetExecutionProviderApi: ::std::option::Option<
        unsafe extern "C" fn(
            provider_name: *const ::std::os::raw::c_char,
            version: u32,
            provider_api: *mut *const ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsSetCustomCreateThreadFn: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            ort_custom_create_thread_fn: OrtCustomCreateThreadFn,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsSetCustomThreadCreationOptions: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            ort_custom_thread_creation_options: *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsSetCustomJoinThreadFn: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            ort_custom_join_thread_fn: OrtCustomJoinThreadFn,
        ) -> OrtStatusPtr,
    >,
    pub SetGlobalCustomCreateThreadFn: ::std::option::Option<
        unsafe extern "C" fn(
            tp_options: *mut OrtThreadingOptions,
            ort_custom_create_thread_fn: OrtCustomCreateThreadFn,
        ) -> OrtStatusPtr,
    >,
    pub SetGlobalCustomThreadCreationOptions: ::std::option::Option<
        unsafe extern "C" fn(
            tp_options: *mut OrtThreadingOptions,
            ort_custom_thread_creation_options: *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub SetGlobalCustomJoinThreadFn: ::std::option::Option<
        unsafe extern "C" fn(
            tp_options: *mut OrtThreadingOptions,
            ort_custom_join_thread_fn: OrtCustomJoinThreadFn,
        ) -> OrtStatusPtr,
    >,
    pub SynchronizeBoundInputs:
        ::std::option::Option<unsafe extern "C" fn(binding_ptr: *mut OrtIoBinding) -> OrtStatusPtr>,
    pub SynchronizeBoundOutputs:
        ::std::option::Option<unsafe extern "C" fn(binding_ptr: *mut OrtIoBinding) -> OrtStatusPtr>,
    pub SessionOptionsAppendExecutionProvider_CUDA_V2: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            cuda_options: *const OrtCUDAProviderOptionsV2,
        ) -> OrtStatusPtr,
    >,
    pub CreateCUDAProviderOptions: ::std::option::Option<
        unsafe extern "C" fn(out: *mut *mut OrtCUDAProviderOptionsV2) -> OrtStatusPtr,
    >,
    pub UpdateCUDAProviderOptions: ::std::option::Option<
        unsafe extern "C" fn(
            cuda_options: *mut OrtCUDAProviderOptionsV2,
            provider_options_keys: *const *const ::std::os::raw::c_char,
            provider_options_values: *const *const ::std::os::raw::c_char,
            num_keys: usize,
        ) -> OrtStatusPtr,
    >,
    pub GetCUDAProviderOptionsAsString: ::std::option::Option<
        unsafe extern "C" fn(
            cuda_options: *const OrtCUDAProviderOptionsV2,
            allocator: *mut OrtAllocator,
            ptr: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    #[doc = " \\brief Release an ::OrtCUDAProviderOptionsV2\n\n \\note This is an exception in the naming convention of other Release* functions, as the name of the method does not have the V2 suffix, but the type does\n\n \\since Version 1.11."]
    pub ReleaseCUDAProviderOptions:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtCUDAProviderOptionsV2)>,
    pub SessionOptionsAppendExecutionProvider_MIGraphX: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            migraphx_options: *const OrtMIGraphXProviderOptions,
        ) -> OrtStatusPtr,
    >,
    pub AddExternalInitializers: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            initializer_names: *const *const ::std::os::raw::c_char,
            initializers: *const *const OrtValue,
            num_initializers: usize,
        ) -> OrtStatusPtr,
    >,
    pub CreateOpAttr: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            data: *const ::std::os::raw::c_void,
            len: ::std::os::raw::c_int,
            type_: OrtOpAttrType,
            op_attr: *mut *mut OrtOpAttr,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseOpAttr: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtOpAttr)>,
    pub CreateOp: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            op_name: *const ::std::os::raw::c_char,
            domain: *const ::std::os::raw::c_char,
            version: ::std::os::raw::c_int,
            type_constraint_names: *mut *const ::std::os::raw::c_char,
            type_constraint_values: *const ONNXTensorElementDataType,
            type_constraint_count: ::std::os::raw::c_int,
            attr_values: *const *const OrtOpAttr,
            attr_count: ::std::os::raw::c_int,
            input_count: ::std::os::raw::c_int,
            output_count: ::std::os::raw::c_int,
            ort_op: *mut *mut OrtOp,
        ) -> OrtStatusPtr,
    >,
    pub InvokeOp: ::std::option::Option<
        unsafe extern "C" fn(
            context: *const OrtKernelContext,
            ort_op: *const OrtOp,
            input_values: *const *const OrtValue,
            input_count: ::std::os::raw::c_int,
            output_values: *const *mut OrtValue,
            output_count: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseOp: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtOp)>,
    pub SessionOptionsAppendExecutionProvider: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            provider_name: *const ::std::os::raw::c_char,
            provider_options_keys: *const *const ::std::os::raw::c_char,
            provider_options_values: *const *const ::std::os::raw::c_char,
            num_keys: usize,
        ) -> OrtStatusPtr,
    >,
    pub CopyKernelInfo: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            info_copy: *mut *mut OrtKernelInfo,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseKernelInfo: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtKernelInfo)>,
    #[doc = " \\name Ort Training\n @{\n** \\brief Gets the Training C Api struct\n*\n* Call this function to access the ::OrtTrainingApi structure that holds pointers to functions that enable\n* training with onnxruntime.\n* \\note A NULL pointer will be returned and no error message will be printed if the training api\n* is not supported with this build. A NULL pointer will be returned and an error message will be\n* printed if the provided version is unsupported, for example when using a runtime older than the\n* version created with this header file.\n*\n* \\param[in] version Must be ::ORT_API_VERSION\n* \\return The ::OrtTrainingApi struct for the version requested.\n*\n* \\since Version 1.13\n*/"]
    pub GetTrainingApi:
        ::std::option::Option<unsafe extern "C" fn(version: u32) -> *const OrtTrainingApi>,
    pub SessionOptionsAppendExecutionProvider_CANN: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            cann_options: *const OrtCANNProviderOptions,
        ) -> OrtStatusPtr,
    >,
    pub CreateCANNProviderOptions: ::std::option::Option<
        unsafe extern "C" fn(out: *mut *mut OrtCANNProviderOptions) -> OrtStatusPtr,
    >,
    pub UpdateCANNProviderOptions: ::std::option::Option<
        unsafe extern "C" fn(
            cann_options: *mut OrtCANNProviderOptions,
            provider_options_keys: *const *const ::std::os::raw::c_char,
            provider_options_values: *const *const ::std::os::raw::c_char,
            num_keys: usize,
        ) -> OrtStatusPtr,
    >,
    pub GetCANNProviderOptionsAsString: ::std::option::Option<
        unsafe extern "C" fn(
            cann_options: *const OrtCANNProviderOptions,
            allocator: *mut OrtAllocator,
            ptr: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    #[doc = " \\brief Release an OrtCANNProviderOptions\n\n \\param[in] the pointer of OrtCANNProviderOptions which will been deleted\n\n \\since Version 1.13."]
    pub ReleaseCANNProviderOptions:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtCANNProviderOptions)>,
    pub MemoryInfoGetDeviceType: ::std::option::Option<
        unsafe extern "C" fn(ptr: *const OrtMemoryInfo, out: *mut OrtMemoryInfoDeviceType),
    >,
    pub UpdateEnvWithCustomLogLevel: ::std::option::Option<
        unsafe extern "C" fn(
            ort_env: *mut OrtEnv,
            log_severity_level: OrtLoggingLevel,
        ) -> OrtStatusPtr,
    >,
    pub SetGlobalIntraOpThreadAffinity: ::std::option::Option<
        unsafe extern "C" fn(
            tp_options: *mut OrtThreadingOptions,
            affinity_string: *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub RegisterCustomOpsLibrary_V2: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            library_name: *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub RegisterCustomOpsUsingFunction: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            registration_func_name: *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfo_GetInputCount: ::std::option::Option<
        unsafe extern "C" fn(info: *const OrtKernelInfo, out: *mut usize) -> OrtStatusPtr,
    >,
    pub KernelInfo_GetOutputCount: ::std::option::Option<
        unsafe extern "C" fn(info: *const OrtKernelInfo, out: *mut usize) -> OrtStatusPtr,
    >,
    pub KernelInfo_GetInputName: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            index: usize,
            out: *mut ::std::os::raw::c_char,
            size: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfo_GetOutputName: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            index: usize,
            out: *mut ::std::os::raw::c_char,
            size: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfo_GetInputTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            index: usize,
            type_info: *mut *mut OrtTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfo_GetOutputTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            index: usize,
            type_info: *mut *mut OrtTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfoGetAttribute_tensor: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            name: *const ::std::os::raw::c_char,
            allocator: *mut OrtAllocator,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub HasSessionConfigEntry: ::std::option::Option<
        unsafe extern "C" fn(
            options: *const OrtSessionOptions,
            config_key: *const ::std::os::raw::c_char,
            out: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub GetSessionConfigEntry: ::std::option::Option<
        unsafe extern "C" fn(
            options: *const OrtSessionOptions,
            config_key: *const ::std::os::raw::c_char,
            config_value: *mut ::std::os::raw::c_char,
            size: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsAppendExecutionProvider_Dnnl: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            dnnl_options: *const OrtDnnlProviderOptions,
        ) -> OrtStatusPtr,
    >,
    pub CreateDnnlProviderOptions: ::std::option::Option<
        unsafe extern "C" fn(out: *mut *mut OrtDnnlProviderOptions) -> OrtStatusPtr,
    >,
    pub UpdateDnnlProviderOptions: ::std::option::Option<
        unsafe extern "C" fn(
            dnnl_options: *mut OrtDnnlProviderOptions,
            provider_options_keys: *const *const ::std::os::raw::c_char,
            provider_options_values: *const *const ::std::os::raw::c_char,
            num_keys: usize,
        ) -> OrtStatusPtr,
    >,
    pub GetDnnlProviderOptionsAsString: ::std::option::Option<
        unsafe extern "C" fn(
            dnnl_options: *const OrtDnnlProviderOptions,
            allocator: *mut OrtAllocator,
            ptr: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    #[doc = " \\brief Release an ::OrtDnnlProviderOptions\n\n \\since Version 1.15."]
    pub ReleaseDnnlProviderOptions:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtDnnlProviderOptions)>,
    pub KernelInfo_GetNodeName: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            out: *mut ::std::os::raw::c_char,
            size: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfo_GetLogger: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            logger: *mut *const OrtLogger,
        ) -> OrtStatusPtr,
    >,
    pub KernelContext_GetLogger: ::std::option::Option<
        unsafe extern "C" fn(
            context: *const OrtKernelContext,
            logger: *mut *const OrtLogger,
        ) -> OrtStatusPtr,
    >,
    pub Logger_LogMessage: ::std::option::Option<
        unsafe extern "C" fn(
            logger: *const OrtLogger,
            log_severity_level: OrtLoggingLevel,
            message: *const ::std::os::raw::c_char,
            file_path: *const ::std::os::raw::c_char,
            line_number: ::std::os::raw::c_int,
            func_name: *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub Logger_GetLoggingSeverityLevel: ::std::option::Option<
        unsafe extern "C" fn(logger: *const OrtLogger, out: *mut OrtLoggingLevel) -> OrtStatusPtr,
    >,
    pub KernelInfoGetConstantInput_tensor: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            index: usize,
            is_constant: *mut ::std::os::raw::c_int,
            out: *mut *const OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub CastTypeInfoToOptionalTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            type_info: *const OrtTypeInfo,
            out: *mut *const OrtOptionalTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetOptionalContainedTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            optional_type_info: *const OrtOptionalTypeInfo,
            out: *mut *mut OrtTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetResizedStringTensorElementBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            value: *mut OrtValue,
            index: usize,
            length_in_bytes: usize,
            buffer: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub KernelContext_GetAllocator: ::std::option::Option<
        unsafe extern "C" fn(
            context: *const OrtKernelContext,
            mem_info: *const OrtMemoryInfo,
            out: *mut *mut OrtAllocator,
        ) -> OrtStatusPtr,
    >,
    #[doc = " \\brief Returns a null terminated string of the build info including git info and cxx flags\n\n \\return UTF-8 encoded version string. Do not deallocate the returned buffer.\n\n \\since Version 1.15."]
    pub GetBuildInfoString:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub CreateROCMProviderOptions: ::std::option::Option<
        unsafe extern "C" fn(out: *mut *mut OrtROCMProviderOptions) -> OrtStatusPtr,
    >,
    pub UpdateROCMProviderOptions: ::std::option::Option<
        unsafe extern "C" fn(
            rocm_options: *mut OrtROCMProviderOptions,
            provider_options_keys: *const *const ::std::os::raw::c_char,
            provider_options_values: *const *const ::std::os::raw::c_char,
            num_keys: usize,
        ) -> OrtStatusPtr,
    >,
    pub GetROCMProviderOptionsAsString: ::std::option::Option<
        unsafe extern "C" fn(
            rocm_options: *const OrtROCMProviderOptions,
            allocator: *mut OrtAllocator,
            ptr: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    #[doc = " \\brief Release an ::OrtROCMProviderOptions\n\n \\note This is an exception in the naming convention of other Release* functions, as the name of the method does not have the V2 suffix, but the type does\n\n \\since Version 1.16."]
    pub ReleaseROCMProviderOptions:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtROCMProviderOptions)>,
    pub CreateAndRegisterAllocatorV2: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut OrtEnv,
            provider_type: *const ::std::os::raw::c_char,
            mem_info: *const OrtMemoryInfo,
            arena_cfg: *const OrtArenaCfg,
            provider_options_keys: *const *const ::std::os::raw::c_char,
            provider_options_values: *const *const ::std::os::raw::c_char,
            num_keys: usize,
        ) -> OrtStatusPtr,
    >,
    pub RunAsync: ::std::option::Option<
        unsafe extern "C" fn(
            session: *mut OrtSession,
            run_options: *const OrtRunOptions,
            input_names: *const *const ::std::os::raw::c_char,
            input: *const *const OrtValue,
            input_len: usize,
            output_names: *const *const ::std::os::raw::c_char,
            output_names_len: usize,
            output: *mut *mut OrtValue,
            run_async_callback: RunAsyncCallbackFn,
            user_data: *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub UpdateTensorRTProviderOptionsWithValue: ::std::option::Option<
        unsafe extern "C" fn(
            tensorrt_options: *mut OrtTensorRTProviderOptionsV2,
            key: *const ::std::os::raw::c_char,
            value: *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub GetTensorRTProviderOptionsByName: ::std::option::Option<
        unsafe extern "C" fn(
            tensorrt_options: *const OrtTensorRTProviderOptionsV2,
            key: *const ::std::os::raw::c_char,
            ptr: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub UpdateCUDAProviderOptionsWithValue: ::std::option::Option<
        unsafe extern "C" fn(
            cuda_options: *mut OrtCUDAProviderOptionsV2,
            key: *const ::std::os::raw::c_char,
            value: *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub GetCUDAProviderOptionsByName: ::std::option::Option<
        unsafe extern "C" fn(
            cuda_options: *const OrtCUDAProviderOptionsV2,
            key: *const ::std::os::raw::c_char,
            ptr: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub KernelContext_GetResource: ::std::option::Option<
        unsafe extern "C" fn(
            context: *const OrtKernelContext,
            resource_version: ::std::os::raw::c_int,
            resource_id: ::std::os::raw::c_int,
            resource: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub SetUserLoggingFunction: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            user_logging_function: OrtLoggingFunction,
            user_logging_param: *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub ShapeInferContext_GetInputCount: ::std::option::Option<
        unsafe extern "C" fn(context: *const OrtShapeInferContext, out: *mut usize) -> OrtStatusPtr,
    >,
    pub ShapeInferContext_GetInputTypeShape: ::std::option::Option<
        unsafe extern "C" fn(
            context: *const OrtShapeInferContext,
            index: usize,
            info: *mut *mut OrtTensorTypeAndShapeInfo,
        ) -> OrtStatusPtr,
    >,
    pub ShapeInferContext_GetAttribute: ::std::option::Option<
        unsafe extern "C" fn(
            context: *const OrtShapeInferContext,
            attr_name: *const ::std::os::raw::c_char,
            attr: *mut *const OrtOpAttr,
        ) -> OrtStatusPtr,
    >,
    pub ShapeInferContext_SetOutputTypeShape: ::std::option::Option<
        unsafe extern "C" fn(
            context: *const OrtShapeInferContext,
            index: usize,
            info: *const OrtTensorTypeAndShapeInfo,
        ) -> OrtStatusPtr,
    >,
    pub SetSymbolicDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            info: *mut OrtTensorTypeAndShapeInfo,
            dim_params: *mut *const ::std::os::raw::c_char,
            dim_params_length: usize,
        ) -> OrtStatusPtr,
    >,
    pub ReadOpAttr: ::std::option::Option<
        unsafe extern "C" fn(
            op_attr: *const OrtOpAttr,
            type_: OrtOpAttrType,
            data: *mut ::std::os::raw::c_void,
            len: usize,
            out: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub SetDeterministicCompute: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions, value: bool) -> OrtStatusPtr,
    >,
    pub KernelContext_ParallelFor: ::std::option::Option<
        unsafe extern "C" fn(
            context: *const OrtKernelContext,
            fn_: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: usize),
            >,
            total: usize,
            num_batch: usize,
            usr_data: *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsAppendExecutionProvider_OpenVINO_V2: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            provider_options_keys: *const *const ::std::os::raw::c_char,
            provider_options_values: *const *const ::std::os::raw::c_char,
            num_keys: usize,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsAppendExecutionProvider_VitisAI: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            provider_options_keys: *const *const ::std::os::raw::c_char,
            provider_options_values: *const *const ::std::os::raw::c_char,
            num_keys: usize,
        ) -> OrtStatusPtr,
    >,
    pub KernelContext_GetScratchBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            context: *const OrtKernelContext,
            mem_info: *const OrtMemoryInfo,
            count_or_bytes: usize,
            out: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfoGetAllocator: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            mem_type: OrtMemType,
            out: *mut *mut OrtAllocator,
        ) -> OrtStatusPtr,
    >,
    pub AddExternalInitializersFromFilesInMemory: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            external_initializer_file_names: *const *const ::std::os::raw::c_char,
            external_initializer_file_buffer_array: *const *mut ::std::os::raw::c_char,
            external_initializer_file_lengths: *const usize,
            num_external_initializer_files: usize,
        ) -> OrtStatusPtr,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OrtApi"][::std::mem::size_of::<OrtApi>() - 2240usize];
    ["Alignment of OrtApi"][::std::mem::align_of::<OrtApi>() - 8usize];
    ["Offset of field: OrtApi::CreateStatus"]
        [::std::mem::offset_of!(OrtApi, CreateStatus) - 0usize];
    ["Offset of field: OrtApi::GetErrorCode"]
        [::std::mem::offset_of!(OrtApi, GetErrorCode) - 8usize];
    ["Offset of field: OrtApi::GetErrorMessage"]
        [::std::mem::offset_of!(OrtApi, GetErrorMessage) - 16usize];
    ["Offset of field: OrtApi::CreateEnv"][::std::mem::offset_of!(OrtApi, CreateEnv) - 24usize];
    ["Offset of field: OrtApi::CreateEnvWithCustomLogger"]
        [::std::mem::offset_of!(OrtApi, CreateEnvWithCustomLogger) - 32usize];
    ["Offset of field: OrtApi::EnableTelemetryEvents"]
        [::std::mem::offset_of!(OrtApi, EnableTelemetryEvents) - 40usize];
    ["Offset of field: OrtApi::DisableTelemetryEvents"]
        [::std::mem::offset_of!(OrtApi, DisableTelemetryEvents) - 48usize];
    ["Offset of field: OrtApi::CreateSession"]
        [::std::mem::offset_of!(OrtApi, CreateSession) - 56usize];
    ["Offset of field: OrtApi::CreateSessionFromArray"]
        [::std::mem::offset_of!(OrtApi, CreateSessionFromArray) - 64usize];
    ["Offset of field: OrtApi::Run"][::std::mem::offset_of!(OrtApi, Run) - 72usize];
    ["Offset of field: OrtApi::CreateSessionOptions"]
        [::std::mem::offset_of!(OrtApi, CreateSessionOptions) - 80usize];
    ["Offset of field: OrtApi::SetOptimizedModelFilePath"]
        [::std::mem::offset_of!(OrtApi, SetOptimizedModelFilePath) - 88usize];
    ["Offset of field: OrtApi::CloneSessionOptions"]
        [::std::mem::offset_of!(OrtApi, CloneSessionOptions) - 96usize];
    ["Offset of field: OrtApi::SetSessionExecutionMode"]
        [::std::mem::offset_of!(OrtApi, SetSessionExecutionMode) - 104usize];
    ["Offset of field: OrtApi::EnableProfiling"]
        [::std::mem::offset_of!(OrtApi, EnableProfiling) - 112usize];
    ["Offset of field: OrtApi::DisableProfiling"]
        [::std::mem::offset_of!(OrtApi, DisableProfiling) - 120usize];
    ["Offset of field: OrtApi::EnableMemPattern"]
        [::std::mem::offset_of!(OrtApi, EnableMemPattern) - 128usize];
    ["Offset of field: OrtApi::DisableMemPattern"]
        [::std::mem::offset_of!(OrtApi, DisableMemPattern) - 136usize];
    ["Offset of field: OrtApi::EnableCpuMemArena"]
        [::std::mem::offset_of!(OrtApi, EnableCpuMemArena) - 144usize];
    ["Offset of field: OrtApi::DisableCpuMemArena"]
        [::std::mem::offset_of!(OrtApi, DisableCpuMemArena) - 152usize];
    ["Offset of field: OrtApi::SetSessionLogId"]
        [::std::mem::offset_of!(OrtApi, SetSessionLogId) - 160usize];
    ["Offset of field: OrtApi::SetSessionLogVerbosityLevel"]
        [::std::mem::offset_of!(OrtApi, SetSessionLogVerbosityLevel) - 168usize];
    ["Offset of field: OrtApi::SetSessionLogSeverityLevel"]
        [::std::mem::offset_of!(OrtApi, SetSessionLogSeverityLevel) - 176usize];
    ["Offset of field: OrtApi::SetSessionGraphOptimizationLevel"]
        [::std::mem::offset_of!(OrtApi, SetSessionGraphOptimizationLevel) - 184usize];
    ["Offset of field: OrtApi::SetIntraOpNumThreads"]
        [::std::mem::offset_of!(OrtApi, SetIntraOpNumThreads) - 192usize];
    ["Offset of field: OrtApi::SetInterOpNumThreads"]
        [::std::mem::offset_of!(OrtApi, SetInterOpNumThreads) - 200usize];
    ["Offset of field: OrtApi::CreateCustomOpDomain"]
        [::std::mem::offset_of!(OrtApi, CreateCustomOpDomain) - 208usize];
    ["Offset of field: OrtApi::CustomOpDomain_Add"]
        [::std::mem::offset_of!(OrtApi, CustomOpDomain_Add) - 216usize];
    ["Offset of field: OrtApi::AddCustomOpDomain"]
        [::std::mem::offset_of!(OrtApi, AddCustomOpDomain) - 224usize];
    ["Offset of field: OrtApi::RegisterCustomOpsLibrary"]
        [::std::mem::offset_of!(OrtApi, RegisterCustomOpsLibrary) - 232usize];
    ["Offset of field: OrtApi::SessionGetInputCount"]
        [::std::mem::offset_of!(OrtApi, SessionGetInputCount) - 240usize];
    ["Offset of field: OrtApi::SessionGetOutputCount"]
        [::std::mem::offset_of!(OrtApi, SessionGetOutputCount) - 248usize];
    ["Offset of field: OrtApi::SessionGetOverridableInitializerCount"]
        [::std::mem::offset_of!(OrtApi, SessionGetOverridableInitializerCount) - 256usize];
    ["Offset of field: OrtApi::SessionGetInputTypeInfo"]
        [::std::mem::offset_of!(OrtApi, SessionGetInputTypeInfo) - 264usize];
    ["Offset of field: OrtApi::SessionGetOutputTypeInfo"]
        [::std::mem::offset_of!(OrtApi, SessionGetOutputTypeInfo) - 272usize];
    ["Offset of field: OrtApi::SessionGetOverridableInitializerTypeInfo"]
        [::std::mem::offset_of!(OrtApi, SessionGetOverridableInitializerTypeInfo) - 280usize];
    ["Offset of field: OrtApi::SessionGetInputName"]
        [::std::mem::offset_of!(OrtApi, SessionGetInputName) - 288usize];
    ["Offset of field: OrtApi::SessionGetOutputName"]
        [::std::mem::offset_of!(OrtApi, SessionGetOutputName) - 296usize];
    ["Offset of field: OrtApi::SessionGetOverridableInitializerName"]
        [::std::mem::offset_of!(OrtApi, SessionGetOverridableInitializerName) - 304usize];
    ["Offset of field: OrtApi::CreateRunOptions"]
        [::std::mem::offset_of!(OrtApi, CreateRunOptions) - 312usize];
    ["Offset of field: OrtApi::RunOptionsSetRunLogVerbosityLevel"]
        [::std::mem::offset_of!(OrtApi, RunOptionsSetRunLogVerbosityLevel) - 320usize];
    ["Offset of field: OrtApi::RunOptionsSetRunLogSeverityLevel"]
        [::std::mem::offset_of!(OrtApi, RunOptionsSetRunLogSeverityLevel) - 328usize];
    ["Offset of field: OrtApi::RunOptionsSetRunTag"]
        [::std::mem::offset_of!(OrtApi, RunOptionsSetRunTag) - 336usize];
    ["Offset of field: OrtApi::RunOptionsGetRunLogVerbosityLevel"]
        [::std::mem::offset_of!(OrtApi, RunOptionsGetRunLogVerbosityLevel) - 344usize];
    ["Offset of field: OrtApi::RunOptionsGetRunLogSeverityLevel"]
        [::std::mem::offset_of!(OrtApi, RunOptionsGetRunLogSeverityLevel) - 352usize];
    ["Offset of field: OrtApi::RunOptionsGetRunTag"]
        [::std::mem::offset_of!(OrtApi, RunOptionsGetRunTag) - 360usize];
    ["Offset of field: OrtApi::RunOptionsSetTerminate"]
        [::std::mem::offset_of!(OrtApi, RunOptionsSetTerminate) - 368usize];
    ["Offset of field: OrtApi::RunOptionsUnsetTerminate"]
        [::std::mem::offset_of!(OrtApi, RunOptionsUnsetTerminate) - 376usize];
    ["Offset of field: OrtApi::CreateTensorAsOrtValue"]
        [::std::mem::offset_of!(OrtApi, CreateTensorAsOrtValue) - 384usize];
    ["Offset of field: OrtApi::CreateTensorWithDataAsOrtValue"]
        [::std::mem::offset_of!(OrtApi, CreateTensorWithDataAsOrtValue) - 392usize];
    ["Offset of field: OrtApi::IsTensor"][::std::mem::offset_of!(OrtApi, IsTensor) - 400usize];
    ["Offset of field: OrtApi::GetTensorMutableData"]
        [::std::mem::offset_of!(OrtApi, GetTensorMutableData) - 408usize];
    ["Offset of field: OrtApi::FillStringTensor"]
        [::std::mem::offset_of!(OrtApi, FillStringTensor) - 416usize];
    ["Offset of field: OrtApi::GetStringTensorDataLength"]
        [::std::mem::offset_of!(OrtApi, GetStringTensorDataLength) - 424usize];
    ["Offset of field: OrtApi::GetStringTensorContent"]
        [::std::mem::offset_of!(OrtApi, GetStringTensorContent) - 432usize];
    ["Offset of field: OrtApi::CastTypeInfoToTensorInfo"]
        [::std::mem::offset_of!(OrtApi, CastTypeInfoToTensorInfo) - 440usize];
    ["Offset of field: OrtApi::GetOnnxTypeFromTypeInfo"]
        [::std::mem::offset_of!(OrtApi, GetOnnxTypeFromTypeInfo) - 448usize];
    ["Offset of field: OrtApi::CreateTensorTypeAndShapeInfo"]
        [::std::mem::offset_of!(OrtApi, CreateTensorTypeAndShapeInfo) - 456usize];
    ["Offset of field: OrtApi::SetTensorElementType"]
        [::std::mem::offset_of!(OrtApi, SetTensorElementType) - 464usize];
    ["Offset of field: OrtApi::SetDimensions"]
        [::std::mem::offset_of!(OrtApi, SetDimensions) - 472usize];
    ["Offset of field: OrtApi::GetTensorElementType"]
        [::std::mem::offset_of!(OrtApi, GetTensorElementType) - 480usize];
    ["Offset of field: OrtApi::GetDimensionsCount"]
        [::std::mem::offset_of!(OrtApi, GetDimensionsCount) - 488usize];
    ["Offset of field: OrtApi::GetDimensions"]
        [::std::mem::offset_of!(OrtApi, GetDimensions) - 496usize];
    ["Offset of field: OrtApi::GetSymbolicDimensions"]
        [::std::mem::offset_of!(OrtApi, GetSymbolicDimensions) - 504usize];
    ["Offset of field: OrtApi::GetTensorShapeElementCount"]
        [::std::mem::offset_of!(OrtApi, GetTensorShapeElementCount) - 512usize];
    ["Offset of field: OrtApi::GetTensorTypeAndShape"]
        [::std::mem::offset_of!(OrtApi, GetTensorTypeAndShape) - 520usize];
    ["Offset of field: OrtApi::GetTypeInfo"]
        [::std::mem::offset_of!(OrtApi, GetTypeInfo) - 528usize];
    ["Offset of field: OrtApi::GetValueType"]
        [::std::mem::offset_of!(OrtApi, GetValueType) - 536usize];
    ["Offset of field: OrtApi::CreateMemoryInfo"]
        [::std::mem::offset_of!(OrtApi, CreateMemoryInfo) - 544usize];
    ["Offset of field: OrtApi::CreateCpuMemoryInfo"]
        [::std::mem::offset_of!(OrtApi, CreateCpuMemoryInfo) - 552usize];
    ["Offset of field: OrtApi::CompareMemoryInfo"]
        [::std::mem::offset_of!(OrtApi, CompareMemoryInfo) - 560usize];
    ["Offset of field: OrtApi::MemoryInfoGetName"]
        [::std::mem::offset_of!(OrtApi, MemoryInfoGetName) - 568usize];
    ["Offset of field: OrtApi::MemoryInfoGetId"]
        [::std::mem::offset_of!(OrtApi, MemoryInfoGetId) - 576usize];
    ["Offset of field: OrtApi::MemoryInfoGetMemType"]
        [::std::mem::offset_of!(OrtApi, MemoryInfoGetMemType) - 584usize];
    ["Offset of field: OrtApi::MemoryInfoGetType"]
        [::std::mem::offset_of!(OrtApi, MemoryInfoGetType) - 592usize];
    ["Offset of field: OrtApi::AllocatorAlloc"]
        [::std::mem::offset_of!(OrtApi, AllocatorAlloc) - 600usize];
    ["Offset of field: OrtApi::AllocatorFree"]
        [::std::mem::offset_of!(OrtApi, AllocatorFree) - 608usize];
    ["Offset of field: OrtApi::AllocatorGetInfo"]
        [::std::mem::offset_of!(OrtApi, AllocatorGetInfo) - 616usize];
    ["Offset of field: OrtApi::GetAllocatorWithDefaultOptions"]
        [::std::mem::offset_of!(OrtApi, GetAllocatorWithDefaultOptions) - 624usize];
    ["Offset of field: OrtApi::AddFreeDimensionOverride"]
        [::std::mem::offset_of!(OrtApi, AddFreeDimensionOverride) - 632usize];
    ["Offset of field: OrtApi::GetValue"][::std::mem::offset_of!(OrtApi, GetValue) - 640usize];
    ["Offset of field: OrtApi::GetValueCount"]
        [::std::mem::offset_of!(OrtApi, GetValueCount) - 648usize];
    ["Offset of field: OrtApi::CreateValue"]
        [::std::mem::offset_of!(OrtApi, CreateValue) - 656usize];
    ["Offset of field: OrtApi::CreateOpaqueValue"]
        [::std::mem::offset_of!(OrtApi, CreateOpaqueValue) - 664usize];
    ["Offset of field: OrtApi::GetOpaqueValue"]
        [::std::mem::offset_of!(OrtApi, GetOpaqueValue) - 672usize];
    ["Offset of field: OrtApi::KernelInfoGetAttribute_float"]
        [::std::mem::offset_of!(OrtApi, KernelInfoGetAttribute_float) - 680usize];
    ["Offset of field: OrtApi::KernelInfoGetAttribute_int64"]
        [::std::mem::offset_of!(OrtApi, KernelInfoGetAttribute_int64) - 688usize];
    ["Offset of field: OrtApi::KernelInfoGetAttribute_string"]
        [::std::mem::offset_of!(OrtApi, KernelInfoGetAttribute_string) - 696usize];
    ["Offset of field: OrtApi::KernelContext_GetInputCount"]
        [::std::mem::offset_of!(OrtApi, KernelContext_GetInputCount) - 704usize];
    ["Offset of field: OrtApi::KernelContext_GetOutputCount"]
        [::std::mem::offset_of!(OrtApi, KernelContext_GetOutputCount) - 712usize];
    ["Offset of field: OrtApi::KernelContext_GetInput"]
        [::std::mem::offset_of!(OrtApi, KernelContext_GetInput) - 720usize];
    ["Offset of field: OrtApi::KernelContext_GetOutput"]
        [::std::mem::offset_of!(OrtApi, KernelContext_GetOutput) - 728usize];
    ["Offset of field: OrtApi::ReleaseEnv"][::std::mem::offset_of!(OrtApi, ReleaseEnv) - 736usize];
    ["Offset of field: OrtApi::ReleaseStatus"]
        [::std::mem::offset_of!(OrtApi, ReleaseStatus) - 744usize];
    ["Offset of field: OrtApi::ReleaseMemoryInfo"]
        [::std::mem::offset_of!(OrtApi, ReleaseMemoryInfo) - 752usize];
    ["Offset of field: OrtApi::ReleaseSession"]
        [::std::mem::offset_of!(OrtApi, ReleaseSession) - 760usize];
    ["Offset of field: OrtApi::ReleaseValue"]
        [::std::mem::offset_of!(OrtApi, ReleaseValue) - 768usize];
    ["Offset of field: OrtApi::ReleaseRunOptions"]
        [::std::mem::offset_of!(OrtApi, ReleaseRunOptions) - 776usize];
    ["Offset of field: OrtApi::ReleaseTypeInfo"]
        [::std::mem::offset_of!(OrtApi, ReleaseTypeInfo) - 784usize];
    ["Offset of field: OrtApi::ReleaseTensorTypeAndShapeInfo"]
        [::std::mem::offset_of!(OrtApi, ReleaseTensorTypeAndShapeInfo) - 792usize];
    ["Offset of field: OrtApi::ReleaseSessionOptions"]
        [::std::mem::offset_of!(OrtApi, ReleaseSessionOptions) - 800usize];
    ["Offset of field: OrtApi::ReleaseCustomOpDomain"]
        [::std::mem::offset_of!(OrtApi, ReleaseCustomOpDomain) - 808usize];
    ["Offset of field: OrtApi::GetDenotationFromTypeInfo"]
        [::std::mem::offset_of!(OrtApi, GetDenotationFromTypeInfo) - 816usize];
    ["Offset of field: OrtApi::CastTypeInfoToMapTypeInfo"]
        [::std::mem::offset_of!(OrtApi, CastTypeInfoToMapTypeInfo) - 824usize];
    ["Offset of field: OrtApi::CastTypeInfoToSequenceTypeInfo"]
        [::std::mem::offset_of!(OrtApi, CastTypeInfoToSequenceTypeInfo) - 832usize];
    ["Offset of field: OrtApi::GetMapKeyType"]
        [::std::mem::offset_of!(OrtApi, GetMapKeyType) - 840usize];
    ["Offset of field: OrtApi::GetMapValueType"]
        [::std::mem::offset_of!(OrtApi, GetMapValueType) - 848usize];
    ["Offset of field: OrtApi::GetSequenceElementType"]
        [::std::mem::offset_of!(OrtApi, GetSequenceElementType) - 856usize];
    ["Offset of field: OrtApi::ReleaseMapTypeInfo"]
        [::std::mem::offset_of!(OrtApi, ReleaseMapTypeInfo) - 864usize];
    ["Offset of field: OrtApi::ReleaseSequenceTypeInfo"]
        [::std::mem::offset_of!(OrtApi, ReleaseSequenceTypeInfo) - 872usize];
    ["Offset of field: OrtApi::SessionEndProfiling"]
        [::std::mem::offset_of!(OrtApi, SessionEndProfiling) - 880usize];
    ["Offset of field: OrtApi::SessionGetModelMetadata"]
        [::std::mem::offset_of!(OrtApi, SessionGetModelMetadata) - 888usize];
    ["Offset of field: OrtApi::ModelMetadataGetProducerName"]
        [::std::mem::offset_of!(OrtApi, ModelMetadataGetProducerName) - 896usize];
    ["Offset of field: OrtApi::ModelMetadataGetGraphName"]
        [::std::mem::offset_of!(OrtApi, ModelMetadataGetGraphName) - 904usize];
    ["Offset of field: OrtApi::ModelMetadataGetDomain"]
        [::std::mem::offset_of!(OrtApi, ModelMetadataGetDomain) - 912usize];
    ["Offset of field: OrtApi::ModelMetadataGetDescription"]
        [::std::mem::offset_of!(OrtApi, ModelMetadataGetDescription) - 920usize];
    ["Offset of field: OrtApi::ModelMetadataLookupCustomMetadataMap"]
        [::std::mem::offset_of!(OrtApi, ModelMetadataLookupCustomMetadataMap) - 928usize];
    ["Offset of field: OrtApi::ModelMetadataGetVersion"]
        [::std::mem::offset_of!(OrtApi, ModelMetadataGetVersion) - 936usize];
    ["Offset of field: OrtApi::ReleaseModelMetadata"]
        [::std::mem::offset_of!(OrtApi, ReleaseModelMetadata) - 944usize];
    ["Offset of field: OrtApi::CreateEnvWithGlobalThreadPools"]
        [::std::mem::offset_of!(OrtApi, CreateEnvWithGlobalThreadPools) - 952usize];
    ["Offset of field: OrtApi::DisablePerSessionThreads"]
        [::std::mem::offset_of!(OrtApi, DisablePerSessionThreads) - 960usize];
    ["Offset of field: OrtApi::CreateThreadingOptions"]
        [::std::mem::offset_of!(OrtApi, CreateThreadingOptions) - 968usize];
    ["Offset of field: OrtApi::ReleaseThreadingOptions"]
        [::std::mem::offset_of!(OrtApi, ReleaseThreadingOptions) - 976usize];
    ["Offset of field: OrtApi::ModelMetadataGetCustomMetadataMapKeys"]
        [::std::mem::offset_of!(OrtApi, ModelMetadataGetCustomMetadataMapKeys) - 984usize];
    ["Offset of field: OrtApi::AddFreeDimensionOverrideByName"]
        [::std::mem::offset_of!(OrtApi, AddFreeDimensionOverrideByName) - 992usize];
    ["Offset of field: OrtApi::GetAvailableProviders"]
        [::std::mem::offset_of!(OrtApi, GetAvailableProviders) - 1000usize];
    ["Offset of field: OrtApi::ReleaseAvailableProviders"]
        [::std::mem::offset_of!(OrtApi, ReleaseAvailableProviders) - 1008usize];
    ["Offset of field: OrtApi::GetStringTensorElementLength"]
        [::std::mem::offset_of!(OrtApi, GetStringTensorElementLength) - 1016usize];
    ["Offset of field: OrtApi::GetStringTensorElement"]
        [::std::mem::offset_of!(OrtApi, GetStringTensorElement) - 1024usize];
    ["Offset of field: OrtApi::FillStringTensorElement"]
        [::std::mem::offset_of!(OrtApi, FillStringTensorElement) - 1032usize];
    ["Offset of field: OrtApi::AddSessionConfigEntry"]
        [::std::mem::offset_of!(OrtApi, AddSessionConfigEntry) - 1040usize];
    ["Offset of field: OrtApi::CreateAllocator"]
        [::std::mem::offset_of!(OrtApi, CreateAllocator) - 1048usize];
    ["Offset of field: OrtApi::ReleaseAllocator"]
        [::std::mem::offset_of!(OrtApi, ReleaseAllocator) - 1056usize];
    ["Offset of field: OrtApi::RunWithBinding"]
        [::std::mem::offset_of!(OrtApi, RunWithBinding) - 1064usize];
    ["Offset of field: OrtApi::CreateIoBinding"]
        [::std::mem::offset_of!(OrtApi, CreateIoBinding) - 1072usize];
    ["Offset of field: OrtApi::ReleaseIoBinding"]
        [::std::mem::offset_of!(OrtApi, ReleaseIoBinding) - 1080usize];
    ["Offset of field: OrtApi::BindInput"][::std::mem::offset_of!(OrtApi, BindInput) - 1088usize];
    ["Offset of field: OrtApi::BindOutput"][::std::mem::offset_of!(OrtApi, BindOutput) - 1096usize];
    ["Offset of field: OrtApi::BindOutputToDevice"]
        [::std::mem::offset_of!(OrtApi, BindOutputToDevice) - 1104usize];
    ["Offset of field: OrtApi::GetBoundOutputNames"]
        [::std::mem::offset_of!(OrtApi, GetBoundOutputNames) - 1112usize];
    ["Offset of field: OrtApi::GetBoundOutputValues"]
        [::std::mem::offset_of!(OrtApi, GetBoundOutputValues) - 1120usize];
    ["Offset of field: OrtApi::ClearBoundInputs"]
        [::std::mem::offset_of!(OrtApi, ClearBoundInputs) - 1128usize];
    ["Offset of field: OrtApi::ClearBoundOutputs"]
        [::std::mem::offset_of!(OrtApi, ClearBoundOutputs) - 1136usize];
    ["Offset of field: OrtApi::TensorAt"][::std::mem::offset_of!(OrtApi, TensorAt) - 1144usize];
    ["Offset of field: OrtApi::CreateAndRegisterAllocator"]
        [::std::mem::offset_of!(OrtApi, CreateAndRegisterAllocator) - 1152usize];
    ["Offset of field: OrtApi::SetLanguageProjection"]
        [::std::mem::offset_of!(OrtApi, SetLanguageProjection) - 1160usize];
    ["Offset of field: OrtApi::SessionGetProfilingStartTimeNs"]
        [::std::mem::offset_of!(OrtApi, SessionGetProfilingStartTimeNs) - 1168usize];
    ["Offset of field: OrtApi::SetGlobalIntraOpNumThreads"]
        [::std::mem::offset_of!(OrtApi, SetGlobalIntraOpNumThreads) - 1176usize];
    ["Offset of field: OrtApi::SetGlobalInterOpNumThreads"]
        [::std::mem::offset_of!(OrtApi, SetGlobalInterOpNumThreads) - 1184usize];
    ["Offset of field: OrtApi::SetGlobalSpinControl"]
        [::std::mem::offset_of!(OrtApi, SetGlobalSpinControl) - 1192usize];
    ["Offset of field: OrtApi::AddInitializer"]
        [::std::mem::offset_of!(OrtApi, AddInitializer) - 1200usize];
    ["Offset of field: OrtApi::CreateEnvWithCustomLoggerAndGlobalThreadPools"]
        [::std::mem::offset_of!(OrtApi, CreateEnvWithCustomLoggerAndGlobalThreadPools) - 1208usize];
    ["Offset of field: OrtApi::SessionOptionsAppendExecutionProvider_CUDA"]
        [::std::mem::offset_of!(OrtApi, SessionOptionsAppendExecutionProvider_CUDA) - 1216usize];
    ["Offset of field: OrtApi::SessionOptionsAppendExecutionProvider_ROCM"]
        [::std::mem::offset_of!(OrtApi, SessionOptionsAppendExecutionProvider_ROCM) - 1224usize];
    ["Offset of field: OrtApi::SessionOptionsAppendExecutionProvider_OpenVINO"][::std::mem::offset_of!(
        OrtApi,
        SessionOptionsAppendExecutionProvider_OpenVINO
    ) - 1232usize];
    ["Offset of field: OrtApi::SetGlobalDenormalAsZero"]
        [::std::mem::offset_of!(OrtApi, SetGlobalDenormalAsZero) - 1240usize];
    ["Offset of field: OrtApi::CreateArenaCfg"]
        [::std::mem::offset_of!(OrtApi, CreateArenaCfg) - 1248usize];
    ["Offset of field: OrtApi::ReleaseArenaCfg"]
        [::std::mem::offset_of!(OrtApi, ReleaseArenaCfg) - 1256usize];
    ["Offset of field: OrtApi::ModelMetadataGetGraphDescription"]
        [::std::mem::offset_of!(OrtApi, ModelMetadataGetGraphDescription) - 1264usize];
    ["Offset of field: OrtApi::SessionOptionsAppendExecutionProvider_TensorRT"][::std::mem::offset_of!(
        OrtApi,
        SessionOptionsAppendExecutionProvider_TensorRT
    ) - 1272usize];
    ["Offset of field: OrtApi::SetCurrentGpuDeviceId"]
        [::std::mem::offset_of!(OrtApi, SetCurrentGpuDeviceId) - 1280usize];
    ["Offset of field: OrtApi::GetCurrentGpuDeviceId"]
        [::std::mem::offset_of!(OrtApi, GetCurrentGpuDeviceId) - 1288usize];
    ["Offset of field: OrtApi::KernelInfoGetAttributeArray_float"]
        [::std::mem::offset_of!(OrtApi, KernelInfoGetAttributeArray_float) - 1296usize];
    ["Offset of field: OrtApi::KernelInfoGetAttributeArray_int64"]
        [::std::mem::offset_of!(OrtApi, KernelInfoGetAttributeArray_int64) - 1304usize];
    ["Offset of field: OrtApi::CreateArenaCfgV2"]
        [::std::mem::offset_of!(OrtApi, CreateArenaCfgV2) - 1312usize];
    ["Offset of field: OrtApi::AddRunConfigEntry"]
        [::std::mem::offset_of!(OrtApi, AddRunConfigEntry) - 1320usize];
    ["Offset of field: OrtApi::CreatePrepackedWeightsContainer"]
        [::std::mem::offset_of!(OrtApi, CreatePrepackedWeightsContainer) - 1328usize];
    ["Offset of field: OrtApi::ReleasePrepackedWeightsContainer"]
        [::std::mem::offset_of!(OrtApi, ReleasePrepackedWeightsContainer) - 1336usize];
    ["Offset of field: OrtApi::CreateSessionWithPrepackedWeightsContainer"]
        [::std::mem::offset_of!(OrtApi, CreateSessionWithPrepackedWeightsContainer) - 1344usize];
    ["Offset of field: OrtApi::CreateSessionFromArrayWithPrepackedWeightsContainer"][::std::mem::offset_of!(
        OrtApi,
        CreateSessionFromArrayWithPrepackedWeightsContainer
    ) - 1352usize];
    ["Offset of field: OrtApi::SessionOptionsAppendExecutionProvider_TensorRT_V2"][::std::mem::offset_of!(
        OrtApi,
        SessionOptionsAppendExecutionProvider_TensorRT_V2
    ) - 1360usize];
    ["Offset of field: OrtApi::CreateTensorRTProviderOptions"]
        [::std::mem::offset_of!(OrtApi, CreateTensorRTProviderOptions) - 1368usize];
    ["Offset of field: OrtApi::UpdateTensorRTProviderOptions"]
        [::std::mem::offset_of!(OrtApi, UpdateTensorRTProviderOptions) - 1376usize];
    ["Offset of field: OrtApi::GetTensorRTProviderOptionsAsString"]
        [::std::mem::offset_of!(OrtApi, GetTensorRTProviderOptionsAsString) - 1384usize];
    ["Offset of field: OrtApi::ReleaseTensorRTProviderOptions"]
        [::std::mem::offset_of!(OrtApi, ReleaseTensorRTProviderOptions) - 1392usize];
    ["Offset of field: OrtApi::EnableOrtCustomOps"]
        [::std::mem::offset_of!(OrtApi, EnableOrtCustomOps) - 1400usize];
    ["Offset of field: OrtApi::RegisterAllocator"]
        [::std::mem::offset_of!(OrtApi, RegisterAllocator) - 1408usize];
    ["Offset of field: OrtApi::UnregisterAllocator"]
        [::std::mem::offset_of!(OrtApi, UnregisterAllocator) - 1416usize];
    ["Offset of field: OrtApi::IsSparseTensor"]
        [::std::mem::offset_of!(OrtApi, IsSparseTensor) - 1424usize];
    ["Offset of field: OrtApi::CreateSparseTensorAsOrtValue"]
        [::std::mem::offset_of!(OrtApi, CreateSparseTensorAsOrtValue) - 1432usize];
    ["Offset of field: OrtApi::FillSparseTensorCoo"]
        [::std::mem::offset_of!(OrtApi, FillSparseTensorCoo) - 1440usize];
    ["Offset of field: OrtApi::FillSparseTensorCsr"]
        [::std::mem::offset_of!(OrtApi, FillSparseTensorCsr) - 1448usize];
    ["Offset of field: OrtApi::FillSparseTensorBlockSparse"]
        [::std::mem::offset_of!(OrtApi, FillSparseTensorBlockSparse) - 1456usize];
    ["Offset of field: OrtApi::CreateSparseTensorWithValuesAsOrtValue"]
        [::std::mem::offset_of!(OrtApi, CreateSparseTensorWithValuesAsOrtValue) - 1464usize];
    ["Offset of field: OrtApi::UseCooIndices"]
        [::std::mem::offset_of!(OrtApi, UseCooIndices) - 1472usize];
    ["Offset of field: OrtApi::UseCsrIndices"]
        [::std::mem::offset_of!(OrtApi, UseCsrIndices) - 1480usize];
    ["Offset of field: OrtApi::UseBlockSparseIndices"]
        [::std::mem::offset_of!(OrtApi, UseBlockSparseIndices) - 1488usize];
    ["Offset of field: OrtApi::GetSparseTensorFormat"]
        [::std::mem::offset_of!(OrtApi, GetSparseTensorFormat) - 1496usize];
    ["Offset of field: OrtApi::GetSparseTensorValuesTypeAndShape"]
        [::std::mem::offset_of!(OrtApi, GetSparseTensorValuesTypeAndShape) - 1504usize];
    ["Offset of field: OrtApi::GetSparseTensorValues"]
        [::std::mem::offset_of!(OrtApi, GetSparseTensorValues) - 1512usize];
    ["Offset of field: OrtApi::GetSparseTensorIndicesTypeShape"]
        [::std::mem::offset_of!(OrtApi, GetSparseTensorIndicesTypeShape) - 1520usize];
    ["Offset of field: OrtApi::GetSparseTensorIndices"]
        [::std::mem::offset_of!(OrtApi, GetSparseTensorIndices) - 1528usize];
    ["Offset of field: OrtApi::HasValue"][::std::mem::offset_of!(OrtApi, HasValue) - 1536usize];
    ["Offset of field: OrtApi::KernelContext_GetGPUComputeStream"]
        [::std::mem::offset_of!(OrtApi, KernelContext_GetGPUComputeStream) - 1544usize];
    ["Offset of field: OrtApi::GetTensorMemoryInfo"]
        [::std::mem::offset_of!(OrtApi, GetTensorMemoryInfo) - 1552usize];
    ["Offset of field: OrtApi::GetExecutionProviderApi"]
        [::std::mem::offset_of!(OrtApi, GetExecutionProviderApi) - 1560usize];
    ["Offset of field: OrtApi::SessionOptionsSetCustomCreateThreadFn"]
        [::std::mem::offset_of!(OrtApi, SessionOptionsSetCustomCreateThreadFn) - 1568usize];
    ["Offset of field: OrtApi::SessionOptionsSetCustomThreadCreationOptions"]
        [::std::mem::offset_of!(OrtApi, SessionOptionsSetCustomThreadCreationOptions) - 1576usize];
    ["Offset of field: OrtApi::SessionOptionsSetCustomJoinThreadFn"]
        [::std::mem::offset_of!(OrtApi, SessionOptionsSetCustomJoinThreadFn) - 1584usize];
    ["Offset of field: OrtApi::SetGlobalCustomCreateThreadFn"]
        [::std::mem::offset_of!(OrtApi, SetGlobalCustomCreateThreadFn) - 1592usize];
    ["Offset of field: OrtApi::SetGlobalCustomThreadCreationOptions"]
        [::std::mem::offset_of!(OrtApi, SetGlobalCustomThreadCreationOptions) - 1600usize];
    ["Offset of field: OrtApi::SetGlobalCustomJoinThreadFn"]
        [::std::mem::offset_of!(OrtApi, SetGlobalCustomJoinThreadFn) - 1608usize];
    ["Offset of field: OrtApi::SynchronizeBoundInputs"]
        [::std::mem::offset_of!(OrtApi, SynchronizeBoundInputs) - 1616usize];
    ["Offset of field: OrtApi::SynchronizeBoundOutputs"]
        [::std::mem::offset_of!(OrtApi, SynchronizeBoundOutputs) - 1624usize];
    ["Offset of field: OrtApi::SessionOptionsAppendExecutionProvider_CUDA_V2"]
        [::std::mem::offset_of!(OrtApi, SessionOptionsAppendExecutionProvider_CUDA_V2) - 1632usize];
    ["Offset of field: OrtApi::CreateCUDAProviderOptions"]
        [::std::mem::offset_of!(OrtApi, CreateCUDAProviderOptions) - 1640usize];
    ["Offset of field: OrtApi::UpdateCUDAProviderOptions"]
        [::std::mem::offset_of!(OrtApi, UpdateCUDAProviderOptions) - 1648usize];
    ["Offset of field: OrtApi::GetCUDAProviderOptionsAsString"]
        [::std::mem::offset_of!(OrtApi, GetCUDAProviderOptionsAsString) - 1656usize];
    ["Offset of field: OrtApi::ReleaseCUDAProviderOptions"]
        [::std::mem::offset_of!(OrtApi, ReleaseCUDAProviderOptions) - 1664usize];
    ["Offset of field: OrtApi::SessionOptionsAppendExecutionProvider_MIGraphX"][::std::mem::offset_of!(
        OrtApi,
        SessionOptionsAppendExecutionProvider_MIGraphX
    ) - 1672usize];
    ["Offset of field: OrtApi::AddExternalInitializers"]
        [::std::mem::offset_of!(OrtApi, AddExternalInitializers) - 1680usize];
    ["Offset of field: OrtApi::CreateOpAttr"]
        [::std::mem::offset_of!(OrtApi, CreateOpAttr) - 1688usize];
    ["Offset of field: OrtApi::ReleaseOpAttr"]
        [::std::mem::offset_of!(OrtApi, ReleaseOpAttr) - 1696usize];
    ["Offset of field: OrtApi::CreateOp"][::std::mem::offset_of!(OrtApi, CreateOp) - 1704usize];
    ["Offset of field: OrtApi::InvokeOp"][::std::mem::offset_of!(OrtApi, InvokeOp) - 1712usize];
    ["Offset of field: OrtApi::ReleaseOp"][::std::mem::offset_of!(OrtApi, ReleaseOp) - 1720usize];
    ["Offset of field: OrtApi::SessionOptionsAppendExecutionProvider"]
        [::std::mem::offset_of!(OrtApi, SessionOptionsAppendExecutionProvider) - 1728usize];
    ["Offset of field: OrtApi::CopyKernelInfo"]
        [::std::mem::offset_of!(OrtApi, CopyKernelInfo) - 1736usize];
    ["Offset of field: OrtApi::ReleaseKernelInfo"]
        [::std::mem::offset_of!(OrtApi, ReleaseKernelInfo) - 1744usize];
    ["Offset of field: OrtApi::GetTrainingApi"]
        [::std::mem::offset_of!(OrtApi, GetTrainingApi) - 1752usize];
    ["Offset of field: OrtApi::SessionOptionsAppendExecutionProvider_CANN"]
        [::std::mem::offset_of!(OrtApi, SessionOptionsAppendExecutionProvider_CANN) - 1760usize];
    ["Offset of field: OrtApi::CreateCANNProviderOptions"]
        [::std::mem::offset_of!(OrtApi, CreateCANNProviderOptions) - 1768usize];
    ["Offset of field: OrtApi::UpdateCANNProviderOptions"]
        [::std::mem::offset_of!(OrtApi, UpdateCANNProviderOptions) - 1776usize];
    ["Offset of field: OrtApi::GetCANNProviderOptionsAsString"]
        [::std::mem::offset_of!(OrtApi, GetCANNProviderOptionsAsString) - 1784usize];
    ["Offset of field: OrtApi::ReleaseCANNProviderOptions"]
        [::std::mem::offset_of!(OrtApi, ReleaseCANNProviderOptions) - 1792usize];
    ["Offset of field: OrtApi::MemoryInfoGetDeviceType"]
        [::std::mem::offset_of!(OrtApi, MemoryInfoGetDeviceType) - 1800usize];
    ["Offset of field: OrtApi::UpdateEnvWithCustomLogLevel"]
        [::std::mem::offset_of!(OrtApi, UpdateEnvWithCustomLogLevel) - 1808usize];
    ["Offset of field: OrtApi::SetGlobalIntraOpThreadAffinity"]
        [::std::mem::offset_of!(OrtApi, SetGlobalIntraOpThreadAffinity) - 1816usize];
    ["Offset of field: OrtApi::RegisterCustomOpsLibrary_V2"]
        [::std::mem::offset_of!(OrtApi, RegisterCustomOpsLibrary_V2) - 1824usize];
    ["Offset of field: OrtApi::RegisterCustomOpsUsingFunction"]
        [::std::mem::offset_of!(OrtApi, RegisterCustomOpsUsingFunction) - 1832usize];
    ["Offset of field: OrtApi::KernelInfo_GetInputCount"]
        [::std::mem::offset_of!(OrtApi, KernelInfo_GetInputCount) - 1840usize];
    ["Offset of field: OrtApi::KernelInfo_GetOutputCount"]
        [::std::mem::offset_of!(OrtApi, KernelInfo_GetOutputCount) - 1848usize];
    ["Offset of field: OrtApi::KernelInfo_GetInputName"]
        [::std::mem::offset_of!(OrtApi, KernelInfo_GetInputName) - 1856usize];
    ["Offset of field: OrtApi::KernelInfo_GetOutputName"]
        [::std::mem::offset_of!(OrtApi, KernelInfo_GetOutputName) - 1864usize];
    ["Offset of field: OrtApi::KernelInfo_GetInputTypeInfo"]
        [::std::mem::offset_of!(OrtApi, KernelInfo_GetInputTypeInfo) - 1872usize];
    ["Offset of field: OrtApi::KernelInfo_GetOutputTypeInfo"]
        [::std::mem::offset_of!(OrtApi, KernelInfo_GetOutputTypeInfo) - 1880usize];
    ["Offset of field: OrtApi::KernelInfoGetAttribute_tensor"]
        [::std::mem::offset_of!(OrtApi, KernelInfoGetAttribute_tensor) - 1888usize];
    ["Offset of field: OrtApi::HasSessionConfigEntry"]
        [::std::mem::offset_of!(OrtApi, HasSessionConfigEntry) - 1896usize];
    ["Offset of field: OrtApi::GetSessionConfigEntry"]
        [::std::mem::offset_of!(OrtApi, GetSessionConfigEntry) - 1904usize];
    ["Offset of field: OrtApi::SessionOptionsAppendExecutionProvider_Dnnl"]
        [::std::mem::offset_of!(OrtApi, SessionOptionsAppendExecutionProvider_Dnnl) - 1912usize];
    ["Offset of field: OrtApi::CreateDnnlProviderOptions"]
        [::std::mem::offset_of!(OrtApi, CreateDnnlProviderOptions) - 1920usize];
    ["Offset of field: OrtApi::UpdateDnnlProviderOptions"]
        [::std::mem::offset_of!(OrtApi, UpdateDnnlProviderOptions) - 1928usize];
    ["Offset of field: OrtApi::GetDnnlProviderOptionsAsString"]
        [::std::mem::offset_of!(OrtApi, GetDnnlProviderOptionsAsString) - 1936usize];
    ["Offset of field: OrtApi::ReleaseDnnlProviderOptions"]
        [::std::mem::offset_of!(OrtApi, ReleaseDnnlProviderOptions) - 1944usize];
    ["Offset of field: OrtApi::KernelInfo_GetNodeName"]
        [::std::mem::offset_of!(OrtApi, KernelInfo_GetNodeName) - 1952usize];
    ["Offset of field: OrtApi::KernelInfo_GetLogger"]
        [::std::mem::offset_of!(OrtApi, KernelInfo_GetLogger) - 1960usize];
    ["Offset of field: OrtApi::KernelContext_GetLogger"]
        [::std::mem::offset_of!(OrtApi, KernelContext_GetLogger) - 1968usize];
    ["Offset of field: OrtApi::Logger_LogMessage"]
        [::std::mem::offset_of!(OrtApi, Logger_LogMessage) - 1976usize];
    ["Offset of field: OrtApi::Logger_GetLoggingSeverityLevel"]
        [::std::mem::offset_of!(OrtApi, Logger_GetLoggingSeverityLevel) - 1984usize];
    ["Offset of field: OrtApi::KernelInfoGetConstantInput_tensor"]
        [::std::mem::offset_of!(OrtApi, KernelInfoGetConstantInput_tensor) - 1992usize];
    ["Offset of field: OrtApi::CastTypeInfoToOptionalTypeInfo"]
        [::std::mem::offset_of!(OrtApi, CastTypeInfoToOptionalTypeInfo) - 2000usize];
    ["Offset of field: OrtApi::GetOptionalContainedTypeInfo"]
        [::std::mem::offset_of!(OrtApi, GetOptionalContainedTypeInfo) - 2008usize];
    ["Offset of field: OrtApi::GetResizedStringTensorElementBuffer"]
        [::std::mem::offset_of!(OrtApi, GetResizedStringTensorElementBuffer) - 2016usize];
    ["Offset of field: OrtApi::KernelContext_GetAllocator"]
        [::std::mem::offset_of!(OrtApi, KernelContext_GetAllocator) - 2024usize];
    ["Offset of field: OrtApi::GetBuildInfoString"]
        [::std::mem::offset_of!(OrtApi, GetBuildInfoString) - 2032usize];
    ["Offset of field: OrtApi::CreateROCMProviderOptions"]
        [::std::mem::offset_of!(OrtApi, CreateROCMProviderOptions) - 2040usize];
    ["Offset of field: OrtApi::UpdateROCMProviderOptions"]
        [::std::mem::offset_of!(OrtApi, UpdateROCMProviderOptions) - 2048usize];
    ["Offset of field: OrtApi::GetROCMProviderOptionsAsString"]
        [::std::mem::offset_of!(OrtApi, GetROCMProviderOptionsAsString) - 2056usize];
    ["Offset of field: OrtApi::ReleaseROCMProviderOptions"]
        [::std::mem::offset_of!(OrtApi, ReleaseROCMProviderOptions) - 2064usize];
    ["Offset of field: OrtApi::CreateAndRegisterAllocatorV2"]
        [::std::mem::offset_of!(OrtApi, CreateAndRegisterAllocatorV2) - 2072usize];
    ["Offset of field: OrtApi::RunAsync"][::std::mem::offset_of!(OrtApi, RunAsync) - 2080usize];
    ["Offset of field: OrtApi::UpdateTensorRTProviderOptionsWithValue"]
        [::std::mem::offset_of!(OrtApi, UpdateTensorRTProviderOptionsWithValue) - 2088usize];
    ["Offset of field: OrtApi::GetTensorRTProviderOptionsByName"]
        [::std::mem::offset_of!(OrtApi, GetTensorRTProviderOptionsByName) - 2096usize];
    ["Offset of field: OrtApi::UpdateCUDAProviderOptionsWithValue"]
        [::std::mem::offset_of!(OrtApi, UpdateCUDAProviderOptionsWithValue) - 2104usize];
    ["Offset of field: OrtApi::GetCUDAProviderOptionsByName"]
        [::std::mem::offset_of!(OrtApi, GetCUDAProviderOptionsByName) - 2112usize];
    ["Offset of field: OrtApi::KernelContext_GetResource"]
        [::std::mem::offset_of!(OrtApi, KernelContext_GetResource) - 2120usize];
    ["Offset of field: OrtApi::SetUserLoggingFunction"]
        [::std::mem::offset_of!(OrtApi, SetUserLoggingFunction) - 2128usize];
    ["Offset of field: OrtApi::ShapeInferContext_GetInputCount"]
        [::std::mem::offset_of!(OrtApi, ShapeInferContext_GetInputCount) - 2136usize];
    ["Offset of field: OrtApi::ShapeInferContext_GetInputTypeShape"]
        [::std::mem::offset_of!(OrtApi, ShapeInferContext_GetInputTypeShape) - 2144usize];
    ["Offset of field: OrtApi::ShapeInferContext_GetAttribute"]
        [::std::mem::offset_of!(OrtApi, ShapeInferContext_GetAttribute) - 2152usize];
    ["Offset of field: OrtApi::ShapeInferContext_SetOutputTypeShape"]
        [::std::mem::offset_of!(OrtApi, ShapeInferContext_SetOutputTypeShape) - 2160usize];
    ["Offset of field: OrtApi::SetSymbolicDimensions"]
        [::std::mem::offset_of!(OrtApi, SetSymbolicDimensions) - 2168usize];
    ["Offset of field: OrtApi::ReadOpAttr"][::std::mem::offset_of!(OrtApi, ReadOpAttr) - 2176usize];
    ["Offset of field: OrtApi::SetDeterministicCompute"]
        [::std::mem::offset_of!(OrtApi, SetDeterministicCompute) - 2184usize];
    ["Offset of field: OrtApi::KernelContext_ParallelFor"]
        [::std::mem::offset_of!(OrtApi, KernelContext_ParallelFor) - 2192usize];
    ["Offset of field: OrtApi::SessionOptionsAppendExecutionProvider_OpenVINO_V2"][::std::mem::offset_of!(
        OrtApi,
        SessionOptionsAppendExecutionProvider_OpenVINO_V2
    ) - 2200usize];
    ["Offset of field: OrtApi::SessionOptionsAppendExecutionProvider_VitisAI"]
        [::std::mem::offset_of!(OrtApi, SessionOptionsAppendExecutionProvider_VitisAI) - 2208usize];
    ["Offset of field: OrtApi::KernelContext_GetScratchBuffer"]
        [::std::mem::offset_of!(OrtApi, KernelContext_GetScratchBuffer) - 2216usize];
    ["Offset of field: OrtApi::KernelInfoGetAllocator"]
        [::std::mem::offset_of!(OrtApi, KernelInfoGetAllocator) - 2224usize];
    ["Offset of field: OrtApi::AddExternalInitializersFromFilesInMemory"]
        [::std::mem::offset_of!(OrtApi, AddExternalInitializersFromFilesInMemory) - 2232usize];
};
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtCustomOpInputOutputCharacteristic {
    INPUT_OUTPUT_REQUIRED = 0,
    INPUT_OUTPUT_OPTIONAL = 1,
    INPUT_OUTPUT_VARIADIC = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtCustomOp {
    pub version: u32,
    pub CreateKernel: ::std::option::Option<
        unsafe extern "C" fn(
            op: *const OrtCustomOp,
            api: *const OrtApi,
            info: *const OrtKernelInfo,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub GetName: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp) -> *const ::std::os::raw::c_char,
    >,
    pub GetExecutionProviderType: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp) -> *const ::std::os::raw::c_char,
    >,
    pub GetInputType: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp, index: usize) -> ONNXTensorElementDataType,
    >,
    pub GetInputTypeCount:
        ::std::option::Option<unsafe extern "C" fn(op: *const OrtCustomOp) -> usize>,
    pub GetOutputType: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp, index: usize) -> ONNXTensorElementDataType,
    >,
    pub GetOutputTypeCount:
        ::std::option::Option<unsafe extern "C" fn(op: *const OrtCustomOp) -> usize>,
    pub KernelCompute: ::std::option::Option<
        unsafe extern "C" fn(
            op_kernel: *mut ::std::os::raw::c_void,
            context: *mut OrtKernelContext,
        ),
    >,
    pub KernelDestroy:
        ::std::option::Option<unsafe extern "C" fn(op_kernel: *mut ::std::os::raw::c_void)>,
    pub GetInputCharacteristic: ::std::option::Option<
        unsafe extern "C" fn(
            op: *const OrtCustomOp,
            index: usize,
        ) -> OrtCustomOpInputOutputCharacteristic,
    >,
    pub GetOutputCharacteristic: ::std::option::Option<
        unsafe extern "C" fn(
            op: *const OrtCustomOp,
            index: usize,
        ) -> OrtCustomOpInputOutputCharacteristic,
    >,
    pub GetInputMemoryType: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp, index: usize) -> OrtMemType,
    >,
    pub GetVariadicInputMinArity: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp) -> ::std::os::raw::c_int,
    >,
    pub GetVariadicInputHomogeneity: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp) -> ::std::os::raw::c_int,
    >,
    pub GetVariadicOutputMinArity: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp) -> ::std::os::raw::c_int,
    >,
    pub GetVariadicOutputHomogeneity: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp) -> ::std::os::raw::c_int,
    >,
    pub CreateKernelV2: ::std::option::Option<
        unsafe extern "C" fn(
            op: *const OrtCustomOp,
            api: *const OrtApi,
            info: *const OrtKernelInfo,
            kernel: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub KernelComputeV2: ::std::option::Option<
        unsafe extern "C" fn(
            op_kernel: *mut ::std::os::raw::c_void,
            context: *mut OrtKernelContext,
        ) -> OrtStatusPtr,
    >,
    pub InferOutputShapeFn: ::std::option::Option<
        unsafe extern "C" fn(
            op: *const OrtCustomOp,
            arg1: *mut OrtShapeInferContext,
        ) -> OrtStatusPtr,
    >,
    pub GetStartVersion: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp) -> ::std::os::raw::c_int,
    >,
    pub GetEndVersion: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp) -> ::std::os::raw::c_int,
    >,
    pub GetMayInplace: ::std::option::Option<
        unsafe extern "C" fn(
            input_index: *mut *mut ::std::os::raw::c_int,
            output_index: *mut *mut ::std::os::raw::c_int,
        ) -> usize,
    >,
    pub ReleaseMayInplace: ::std::option::Option<
        unsafe extern "C" fn(
            input_index: *mut ::std::os::raw::c_int,
            output_index: *mut ::std::os::raw::c_int,
        ),
    >,
    pub GetAliasMap: ::std::option::Option<
        unsafe extern "C" fn(
            input_index: *mut *mut ::std::os::raw::c_int,
            output_index: *mut *mut ::std::os::raw::c_int,
        ) -> usize,
    >,
    pub ReleaseAliasMap: ::std::option::Option<
        unsafe extern "C" fn(
            input_index: *mut ::std::os::raw::c_int,
            output_index: *mut ::std::os::raw::c_int,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OrtCustomOp"][::std::mem::size_of::<OrtCustomOp>() - 208usize];
    ["Alignment of OrtCustomOp"][::std::mem::align_of::<OrtCustomOp>() - 8usize];
    ["Offset of field: OrtCustomOp::version"]
        [::std::mem::offset_of!(OrtCustomOp, version) - 0usize];
    ["Offset of field: OrtCustomOp::CreateKernel"]
        [::std::mem::offset_of!(OrtCustomOp, CreateKernel) - 8usize];
    ["Offset of field: OrtCustomOp::GetName"]
        [::std::mem::offset_of!(OrtCustomOp, GetName) - 16usize];
    ["Offset of field: OrtCustomOp::GetExecutionProviderType"]
        [::std::mem::offset_of!(OrtCustomOp, GetExecutionProviderType) - 24usize];
    ["Offset of field: OrtCustomOp::GetInputType"]
        [::std::mem::offset_of!(OrtCustomOp, GetInputType) - 32usize];
    ["Offset of field: OrtCustomOp::GetInputTypeCount"]
        [::std::mem::offset_of!(OrtCustomOp, GetInputTypeCount) - 40usize];
    ["Offset of field: OrtCustomOp::GetOutputType"]
        [::std::mem::offset_of!(OrtCustomOp, GetOutputType) - 48usize];
    ["Offset of field: OrtCustomOp::GetOutputTypeCount"]
        [::std::mem::offset_of!(OrtCustomOp, GetOutputTypeCount) - 56usize];
    ["Offset of field: OrtCustomOp::KernelCompute"]
        [::std::mem::offset_of!(OrtCustomOp, KernelCompute) - 64usize];
    ["Offset of field: OrtCustomOp::KernelDestroy"]
        [::std::mem::offset_of!(OrtCustomOp, KernelDestroy) - 72usize];
    ["Offset of field: OrtCustomOp::GetInputCharacteristic"]
        [::std::mem::offset_of!(OrtCustomOp, GetInputCharacteristic) - 80usize];
    ["Offset of field: OrtCustomOp::GetOutputCharacteristic"]
        [::std::mem::offset_of!(OrtCustomOp, GetOutputCharacteristic) - 88usize];
    ["Offset of field: OrtCustomOp::GetInputMemoryType"]
        [::std::mem::offset_of!(OrtCustomOp, GetInputMemoryType) - 96usize];
    ["Offset of field: OrtCustomOp::GetVariadicInputMinArity"]
        [::std::mem::offset_of!(OrtCustomOp, GetVariadicInputMinArity) - 104usize];
    ["Offset of field: OrtCustomOp::GetVariadicInputHomogeneity"]
        [::std::mem::offset_of!(OrtCustomOp, GetVariadicInputHomogeneity) - 112usize];
    ["Offset of field: OrtCustomOp::GetVariadicOutputMinArity"]
        [::std::mem::offset_of!(OrtCustomOp, GetVariadicOutputMinArity) - 120usize];
    ["Offset of field: OrtCustomOp::GetVariadicOutputHomogeneity"]
        [::std::mem::offset_of!(OrtCustomOp, GetVariadicOutputHomogeneity) - 128usize];
    ["Offset of field: OrtCustomOp::CreateKernelV2"]
        [::std::mem::offset_of!(OrtCustomOp, CreateKernelV2) - 136usize];
    ["Offset of field: OrtCustomOp::KernelComputeV2"]
        [::std::mem::offset_of!(OrtCustomOp, KernelComputeV2) - 144usize];
    ["Offset of field: OrtCustomOp::InferOutputShapeFn"]
        [::std::mem::offset_of!(OrtCustomOp, InferOutputShapeFn) - 152usize];
    ["Offset of field: OrtCustomOp::GetStartVersion"]
        [::std::mem::offset_of!(OrtCustomOp, GetStartVersion) - 160usize];
    ["Offset of field: OrtCustomOp::GetEndVersion"]
        [::std::mem::offset_of!(OrtCustomOp, GetEndVersion) - 168usize];
    ["Offset of field: OrtCustomOp::GetMayInplace"]
        [::std::mem::offset_of!(OrtCustomOp, GetMayInplace) - 176usize];
    ["Offset of field: OrtCustomOp::ReleaseMayInplace"]
        [::std::mem::offset_of!(OrtCustomOp, ReleaseMayInplace) - 184usize];
    ["Offset of field: OrtCustomOp::GetAliasMap"]
        [::std::mem::offset_of!(OrtCustomOp, GetAliasMap) - 192usize];
    ["Offset of field: OrtCustomOp::ReleaseAliasMap"]
        [::std::mem::offset_of!(OrtCustomOp, ReleaseAliasMap) - 200usize];
};
extern "C" {
    pub fn OrtSessionOptionsAppendExecutionProvider_CUDA(
        options: *mut OrtSessionOptions,
        device_id: ::std::os::raw::c_int,
    ) -> OrtStatusPtr;
}
extern "C" {
    pub fn OrtSessionOptionsAppendExecutionProvider_ROCM(
        options: *mut OrtSessionOptions,
        device_id: ::std::os::raw::c_int,
    ) -> OrtStatusPtr;
}
extern "C" {
    pub fn OrtSessionOptionsAppendExecutionProvider_MIGraphX(
        options: *mut OrtSessionOptions,
        device_id: ::std::os::raw::c_int,
    ) -> OrtStatusPtr;
}
extern "C" {
    pub fn OrtSessionOptionsAppendExecutionProvider_Dnnl(
        options: *mut OrtSessionOptions,
        use_arena: ::std::os::raw::c_int,
    ) -> OrtStatusPtr;
}
extern "C" {
    pub fn OrtSessionOptionsAppendExecutionProvider_Tensorrt(
        options: *mut OrtSessionOptions,
        device_id: ::std::os::raw::c_int,
    ) -> OrtStatusPtr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
